/**
 * Copyright 2013 AppDynamics
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.appdynamics.bmc.bppmClient.stubs;
/**
 * ImpactManagerStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.1  Built on : Aug 31, 2011 (12:22:40 CEST)
 */

public class ImpactManagerStub extends org.apache.axis2.client.Stub
{
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();

    private static int counter = 0;

    private static synchronized java.lang.String getUniqueSuffix(){
        // reset the counter if it is greater than 99999
        if (counter > 99999){
            counter = 0;
        }
        counter = counter + 1; 
        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
    }


    private void populateAxisService() throws org.apache.axis2.AxisFault {

    //creating the Service with a unique name
    _service = new org.apache.axis2.description.AxisService("ImpactManager" + getUniqueSuffix());
    addAnonymousOperations();

    //creating the operations
    org.apache.axis2.description.AxisOperation __operation;

    _operations = new org.apache.axis2.description.AxisOperation[28];
    
     __operation = new org.apache.axis2.description.OutInAxisOperation();
            

      __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "subscribe"));
      _service.addOperation(__operation);
       _operations[0]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

       __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "getEvents"));
       _service.addOperation(__operation);
    

    
    
       _operations[1]=__operation;
        
    
       __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "ackEvents"));
        _service.addOperation(__operation);
    

    
    
        _operations[2]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "retrieveQueryResults"));
    _service.addOperation(__operation);
    

    
    
        _operations[3]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryComponentStatus"));
    _service.addOperation(__operation);
    

    
    
        _operations[4]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "getFilterNames"));
    _service.addOperation(__operation);
    

    
    
        _operations[5]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "getQueryResultCount"));
    _service.addOperation(__operation);
    

    
    
        _operations[6]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryComponentsByCondition"));
    _service.addOperation(__operation);
    

    
    
        _operations[7]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "endQuery"));
    _service.addOperation(__operation);
    

    
    
        _operations[8]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryEvents"));
    _service.addOperation(__operation);
    

    
    
        _operations[9]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryComponentEvents"));
    _service.addOperation(__operation);
    

    
    
        _operations[10]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryModelImpact"));
    _service.addOperation(__operation);
    

    
    
        _operations[11]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryComponentsByStatus"));
    _service.addOperation(__operation);
    

    
    
        _operations[12]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryComponent"));
    _service.addOperation(__operation);
    

    
    
        _operations[13]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "setManualStatus"));
    _service.addOperation(__operation);
    

    
    
        _operations[14]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "connect"));
    _service.addOperation(__operation);
    

    
    
        _operations[15]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "getCellInfo"));
    _service.addOperation(__operation);
    

    
    
        _operations[16]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryModelPossibleRootCauses"));
    _service.addOperation(__operation);
    

    
    
        _operations[17]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "sendEvent"));
    _service.addOperation(__operation);
    

    
    
        _operations[18]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "disconnect"));
    _service.addOperation(__operation);
    

    
    
        _operations[19]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryEventsByDate"));
    _service.addOperation(__operation);
    

    
    
        _operations[20]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryClassDefinitions"));
    _service.addOperation(__operation);
    

    
    
        _operations[21]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "unsubscribe"));
    _service.addOperation(__operation);
    

    
    
        _operations[22]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryEventByID"));
    _service.addOperation(__operation);
    

    
    
        _operations[23]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "setMaintenanceMode"));
    _service.addOperation(__operation);
    

    
    
        _operations[24]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "queryData"));
    _service.addOperation(__operation);
    

    
    
        _operations[25]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "unregisterStateChange"));
    _service.addOperation(__operation);
    

    
    
        _operations[26]=__operation;
        
    
               __operation = new org.apache.axis2.description.OutInAxisOperation();
            

        __operation.setName(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01", "registerStateChange"));
    _service.addOperation(__operation);
    

    
    
        _operations[27]=__operation;
        
    
    }

//populates the faults
private void populateFaults(){
     
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Subscribe"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Subscribe"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Subscribe"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetEvents"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetEvents"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetEvents"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "AckEvents"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "AckEvents"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "AckEvents"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RetrieveQueryResults"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RetrieveQueryResults"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RetrieveQueryResults"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentStatus"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentStatus"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentStatus"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetFilterNames"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetFilterNames"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetFilterNames"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetQueryResultCount"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetQueryResultCount"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetQueryResultCount"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByCondition"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByCondition"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByCondition"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "EndQuery"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "EndQuery"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "EndQuery"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEvents"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEvents"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEvents"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentEvents"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentEvents"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentEvents"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelImpact"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelImpact"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelImpact"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByStatus"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByStatus"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponentsByStatus"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponent"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponent"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryComponent"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetManualStatus"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetManualStatus"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetManualStatus"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Connect"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Connect"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Connect"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetCellInfo"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetCellInfo"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "GetCellInfo"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelPossibleRootCauses"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelPossibleRootCauses"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryModelPossibleRootCauses"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SendEvent"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SendEvent"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SendEvent"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Disconnect"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Disconnect"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Disconnect"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventsByDate"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventsByDate"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventsByDate"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryClassDefinitions"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryClassDefinitions"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryClassDefinitions"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Unsubscribe"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Unsubscribe"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "Unsubscribe"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventByID"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventByID"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryEventByID"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetMaintenanceMode"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetMaintenanceMode"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "SetMaintenanceMode"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryData"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryData"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "QueryData"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "UnregisterStateChange"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "UnregisterStateChange"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "UnregisterStateChange"),"ImpactManagerStub$Execution_fault");
       
          faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RegisterStateChange"),"Execution_Fault");
          faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RegisterStateChange"),"Execution_Fault");
          faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","execution_fault"), "RegisterStateChange"),"ImpactManagerStub$Execution_fault");
       


}

/**
  *Constructor that takes in a configContext
  */

    public ImpactManagerStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
 * Constructor that takes in a configContext  and useseperate listner
 */
   public ImpactManagerStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
     populateAxisService();
     populateFaults();

    _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
    

    _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
            targetEndpoint));
    _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    

}

/**
 * Default Constructor
 */
public ImpactManagerStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
    
                this(configurationContext,"http://192.168.222.131:9080/imws/services/ImpactManager/" );
            
}

/**
 * Default Constructor
 */
public ImpactManagerStub() throws org.apache.axis2.AxisFault {
    
                this("http://192.168.222.131:9080/imws/services/ImpactManager/" );
            
}

/**
 * Constructor taking the target endpoint
 */
public ImpactManagerStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
    this(null,targetEndpoint);
}



    
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#subscribe
                 * @param subscribe
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.NoValue_output subscribe(

                        ImpactManagerStub.Subscribe subscribe)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
          _operationClient.getOptions().setAction("Subscribe");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                subscribe,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "subscribe")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "subscribe"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.NoValue_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.NoValue_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Subscribe"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Subscribe"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Subscribe"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#getEvents
                 * @param getEvents
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.GetEvents_output getEvents(

                        ImpactManagerStub.GetEvents getEvents)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
          _operationClient.getOptions().setAction("GetEvents");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                getEvents,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getEvents")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getEvents"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.GetEvents_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.GetEvents_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetEvents"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetEvents"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetEvents"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#ackEvents
                 * @param ackEvents
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.NoValue_output ackEvents(

                        ImpactManagerStub.AckEvents ackEvents)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
          _operationClient.getOptions().setAction("AckEvents");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                ackEvents,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "ackEvents")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "ackEvents"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.NoValue_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.NoValue_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AckEvents"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AckEvents"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"AckEvents"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#retrieveQueryResults
                 * @param retrieveQueryResults
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.RetrieveQueryResults_output retrieveQueryResults(

                        ImpactManagerStub.RetrieveQueryResults retrieveQueryResults)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
          _operationClient.getOptions().setAction("RetrieveQueryResults");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                retrieveQueryResults,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "retrieveQueryResults")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "retrieveQueryResults"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.RetrieveQueryResults_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.RetrieveQueryResults_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RetrieveQueryResults"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RetrieveQueryResults"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RetrieveQueryResults"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryComponentStatus
                 * @param queryComponentStatus
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryComponentStatus(

                        ImpactManagerStub.QueryComponentStatus queryComponentStatus)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
          _operationClient.getOptions().setAction("QueryComponentStatus");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryComponentStatus,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentStatus")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentStatus"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentStatus"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentStatus"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentStatus"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#getFilterNames
                 * @param getFilterNames
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.GetFilterNames_output getFilterNames(

                        ImpactManagerStub.GetFilterNames getFilterNames)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
          _operationClient.getOptions().setAction("GetFilterNames");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                getFilterNames,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getFilterNames")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getFilterNames"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.GetFilterNames_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.GetFilterNames_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetFilterNames"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetFilterNames"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetFilterNames"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#getQueryResultCount
                 * @param getQueryResultCount
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.GetQueryResultCount_output getQueryResultCount(

                        ImpactManagerStub.GetQueryResultCount getQueryResultCount)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
          _operationClient.getOptions().setAction("GetQueryResultCount");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                getQueryResultCount,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getQueryResultCount")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getQueryResultCount"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.GetQueryResultCount_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.GetQueryResultCount_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetQueryResultCount"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetQueryResultCount"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetQueryResultCount"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryComponentsByCondition
                 * @param queryComponentsByCondition
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryComponentsByCondition(

                        ImpactManagerStub.QueryComponentsByCondition queryComponentsByCondition)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
          _operationClient.getOptions().setAction("QueryComponentsByCondition");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryComponentsByCondition,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentsByCondition")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentsByCondition"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByCondition"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByCondition"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByCondition"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#endQuery
                 * @param endQuery
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.NoValue_output endQuery(

                        ImpactManagerStub.EndQuery endQuery)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
          _operationClient.getOptions().setAction("EndQuery");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                endQuery,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "endQuery")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "endQuery"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.NoValue_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.NoValue_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"EndQuery"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"EndQuery"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"EndQuery"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryEvents
                 * @param queryEvents
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryEvents(

                        ImpactManagerStub.QueryEvents queryEvents)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
          _operationClient.getOptions().setAction("QueryEvents");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryEvents,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEvents")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEvents"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEvents"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEvents"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEvents"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryComponentEvents
                 * @param queryComponentEvents
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryComponentEvents(

                        ImpactManagerStub.QueryComponentEvents queryComponentEvents)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
          _operationClient.getOptions().setAction("QueryComponentEvents");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryComponentEvents,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentEvents")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentEvents"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentEvents"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentEvents"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentEvents"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryModelImpact
                 * @param queryModelImpact
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryModelImpact(

                        ImpactManagerStub.QueryModelImpact queryModelImpact)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
          _operationClient.getOptions().setAction("QueryModelImpact");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryModelImpact,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryModelImpact")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryModelImpact"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelImpact"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelImpact"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelImpact"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryComponentsByStatus
                 * @param queryComponentsByStatus
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryComponentsByStatus(

                        ImpactManagerStub.QueryComponentsByStatus queryComponentsByStatus)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
          _operationClient.getOptions().setAction("QueryComponentsByStatus");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryComponentsByStatus,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentsByStatus")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponentsByStatus"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByStatus"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByStatus"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponentsByStatus"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryComponent
                 * @param queryComponent
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryComponent(

                        ImpactManagerStub.QueryComponent queryComponent)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
          _operationClient.getOptions().setAction("QueryComponent");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryComponent,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponent")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryComponent"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponent"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponent"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryComponent"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#setManualStatus
                 * @param setManualStatus
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.SetManualStatus_output setManualStatus(

                        ImpactManagerStub.SetManualStatus setManualStatus)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
          _operationClient.getOptions().setAction("SetManualStatus");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                setManualStatus,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "setManualStatus")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "setManualStatus"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.SetManualStatus_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.SetManualStatus_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetManualStatus"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetManualStatus"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetManualStatus"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#connect
                 * @param connect
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.Connect_output connect(

                        ImpactManagerStub.Connect connect)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
          _operationClient.getOptions().setAction("Connect");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                connect,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "connect")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "connect"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.Connect_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.Connect_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Connect"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Connect"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Connect"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#getCellInfo
                 * @param getCellInfo
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.GetCellInfo_output getCellInfo(

                        ImpactManagerStub.GetCellInfo getCellInfo)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
          _operationClient.getOptions().setAction("GetCellInfo");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                getCellInfo,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getCellInfo")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "getCellInfo"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.GetCellInfo_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.GetCellInfo_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCellInfo"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCellInfo"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"GetCellInfo"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryModelPossibleRootCauses
                 * @param queryModelPossibleRootCauses
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryModelPossibleRootCauses(

                        ImpactManagerStub.QueryModelPossibleRootCauses queryModelPossibleRootCauses)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
          _operationClient.getOptions().setAction("QueryModelPossibleRootCauses");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryModelPossibleRootCauses,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryModelPossibleRootCauses")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryModelPossibleRootCauses"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelPossibleRootCauses"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelPossibleRootCauses"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryModelPossibleRootCauses"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#sendEvent
                 * @param sendEvent
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.SendEvent_output sendEvent(

                        ImpactManagerStub.SendEvent sendEvent)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
          _operationClient.getOptions().setAction("SendEvent");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                sendEvent,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "sendEvent")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "sendEvent"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.SendEvent_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.SendEvent_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SendEvent"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SendEvent"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SendEvent"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#disconnect
                 * @param disconnect
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.NoValue_output disconnect(

                        ImpactManagerStub.Disconnect disconnect)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
          _operationClient.getOptions().setAction("Disconnect");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                disconnect,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "disconnect")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "disconnect"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.NoValue_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.NoValue_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Disconnect"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Disconnect"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Disconnect"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryEventsByDate
                 * @param queryEventsByDate
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryEventsByDate(

                        ImpactManagerStub.QueryEventsByDate queryEventsByDate)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
          _operationClient.getOptions().setAction("QueryEventsByDate");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryEventsByDate,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEventsByDate")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEventsByDate"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventsByDate"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventsByDate"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventsByDate"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryClassDefinitions
                 * @param queryClassDefinitions
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryClassDefinitions_output queryClassDefinitions(

                        ImpactManagerStub.QueryClassDefinitions queryClassDefinitions)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
          _operationClient.getOptions().setAction("QueryClassDefinitions");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryClassDefinitions,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryClassDefinitions")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryClassDefinitions"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryClassDefinitions_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryClassDefinitions_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryClassDefinitions"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryClassDefinitions"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryClassDefinitions"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#unsubscribe
                 * @param unsubscribe
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.NoValue_output unsubscribe(

                        ImpactManagerStub.Unsubscribe unsubscribe)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
          _operationClient.getOptions().setAction("Unsubscribe");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                unsubscribe,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "unsubscribe")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "unsubscribe"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.NoValue_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.NoValue_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Unsubscribe"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Unsubscribe"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Unsubscribe"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryEventByID
                 * @param queryEventByID
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryEventByID(

                        ImpactManagerStub.QueryEventByID queryEventByID)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
          _operationClient.getOptions().setAction("QueryEventByID");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryEventByID,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEventByID")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryEventByID"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventByID"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventByID"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryEventByID"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#setMaintenanceMode
                 * @param setMaintenanceMode
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.SetMaintenanceMode_output setMaintenanceMode(

                        ImpactManagerStub.SetMaintenanceMode setMaintenanceMode)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
          _operationClient.getOptions().setAction("SetMaintenanceMode");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                setMaintenanceMode,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "setMaintenanceMode")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "setMaintenanceMode"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.SetMaintenanceMode_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.SetMaintenanceMode_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetMaintenanceMode"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetMaintenanceMode"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"SetMaintenanceMode"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#queryData
                 * @param queryData
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.QueryResultHandle_output queryData(

                        ImpactManagerStub.QueryData queryData)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
          _operationClient.getOptions().setAction("QueryData");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                queryData,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryData")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "queryData"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.QueryResultHandle_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.QueryResultHandle_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryData"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryData"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"QueryData"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#unregisterStateChange
                 * @param unregisterStateChange
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.UnregisterStateChange_output unregisterStateChange(

                        ImpactManagerStub.UnregisterStateChange unregisterStateChange)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
          _operationClient.getOptions().setAction("UnregisterStateChange");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                unregisterStateChange,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "unregisterStateChange")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "unregisterStateChange"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.UnregisterStateChange_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.UnregisterStateChange_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"UnregisterStateChange"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"UnregisterStateChange"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"UnregisterStateChange"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        
                /**
                 * Auto generated method signature
                 * 
                 * @see ImpactManager#registerStateChange
                 * @param registerStateChange
                
                 * @throws Execution_Fault : 
                 */

                

                        public  ImpactManagerStub.RegisterStateChange_output registerStateChange(

                        ImpactManagerStub.RegisterStateChange registerStateChange)
                    

                throws java.rmi.RemoteException
                
                
                    ,com.appdynamics.bmc.bppmClient.stubs.Execution_Fault{
          org.apache.axis2.context.MessageContext _messageContext = null;
          try{
           org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
          _operationClient.getOptions().setAction("RegisterStateChange");
          _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

          
          
              addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
          

          // create a message context
          _messageContext = new org.apache.axis2.context.MessageContext();

          

          // create SOAP envelope with that payload
          org.apache.axiom.soap.SOAPEnvelope env = null;
                
                                                
                                                env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                registerStateChange,
                                                optimizeContent(new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "registerStateChange")), new javax.xml.namespace.QName("http://imapi.bmc.com/2010/01",
                                                "registerStateChange"));
                                            
    //adding SOAP soap_headers
     _serviceClient.addHeadersToEnvelope(env);
    // set the message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message contxt to the operation client
    _operationClient.addMessageContext(_messageContext);

    //execute the operation client
    _operationClient.execute(true);

     
           org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                       org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            
            
                            java.lang.Object object = fromOM(
                                         _returnEnv.getBody().getFirstElement() ,
                                         ImpactManagerStub.RegisterStateChange_output.class,
                                          getEnvelopeNamespaces(_returnEnv));

                           
                                    return (ImpactManagerStub.RegisterStateChange_output)object;
                               
     }catch(org.apache.axis2.AxisFault f){

        org.apache.axiom.om.OMElement faultElt = f.getDetail();
        if (faultElt!=null){
            if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RegisterStateChange"))){
                //make the fault by reflection
                try{
                    java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RegisterStateChange"));
                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                    java.lang.Exception ex = (java.lang.Exception) exceptionClass.newInstance();
                    //message class
                    java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"RegisterStateChange"));
                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                    java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                               new java.lang.Class[]{messageClass});
                    m.invoke(ex,new java.lang.Object[]{messageObject});
                    
                    if (ex instanceof Execution_Fault){
                      throw (Execution_Fault)ex;
                    }
                    

                    throw new java.rmi.RemoteException(ex.getMessage(), ex);
                }catch(java.lang.ClassCastException e){
                   // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.ClassNotFoundException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }catch (java.lang.NoSuchMethodException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }  catch (java.lang.IllegalAccessException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }   catch (java.lang.InstantiationException e) {
                    // we cannot intantiate the class - throw the original Axis fault
                    throw f;
                }
            }else{
                throw f;
            }
        }else{
            throw f;
        }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                  _messageContext.getTransportOut().getSender().cleanup(_messageContext);
            }
        }
    }
        


   /**
    *  A utility method that copies the namepaces from the SOAPEnvelope
    */
   private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
    java.util.Map returnMap = new java.util.HashMap();
    java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
    while (namespaceIterator.hasNext()) {
        org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
        returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
    }
   return returnMap;
}



private javax.xml.namespace.QName[] opNameArray = null;
private boolean optimizeContent(javax.xml.namespace.QName opName) {
    

    if (opNameArray == null) {
        return false;
    }
    for (int i = 0; i < opNameArray.length; i++) {
        if (opName.equals(opNameArray[i])) {
            return true;   
        }
    }
    return false;
}
 //http://192.168.222.131:9080/imws/services/ImpactManager/
    public static class ClassName
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "className",
            "");

        

                    /**
                    * field for ClassName
                    */

                    
                                protected java.lang.String localClassName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getClassName(){
                           return localClassName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassName
                           */
                           public void setClassName(java.lang.String param){
                        
                                        this.localClassName=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "className";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":className",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "className",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localClassName==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localClassName);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localClassName==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassName)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassName parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassName object =
            new ClassName();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","className").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StartIndex
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "startIndex",
            "");

        

                    /**
                    * field for StartIndex
                    */

                    
                                protected long localStartIndex ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getStartIndex(){
                           return localStartIndex;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StartIndex
                           */
                           public void setStartIndex(long param){
                        
                                        this.localStartIndex=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "startIndex";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":startIndex",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "startIndex",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StartIndex parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StartIndex object =
            new StartIndex();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","startIndex").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStartIndex(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StateChangeType
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = StateChangeType
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for BCompChange
                    */

                    
                                protected boolean localBCompChange ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getBCompChange(){
                           return localBCompChange;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BCompChange
                           */
                           public void setBCompChange(boolean param){
                        
                                        this.localBCompChange=param;
                                

                           }
                        

                    /**
                    * field for BCompDelete
                    */

                    
                                protected boolean localBCompDelete ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getBCompDelete(){
                           return localBCompDelete;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BCompDelete
                           */
                           public void setBCompDelete(boolean param){
                        
                                        this.localBCompDelete=param;
                                

                           }
                        

                    /**
                    * field for BRelChange
                    */

                    
                                protected boolean localBRelChange ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getBRelChange(){
                           return localBRelChange;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BRelChange
                           */
                           public void setBRelChange(boolean param){
                        
                                        this.localBRelChange=param;
                                

                           }
                        

                    /**
                    * field for BRelDelete
                    */

                    
                                protected boolean localBRelDelete ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getBRelDelete(){
                           return localBRelDelete;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BRelDelete
                           */
                           public void setBRelDelete(boolean param){
                        
                                        this.localBRelDelete=param;
                                

                           }
                        

                    /**
                    * field for BAll
                    */

                    
                                protected boolean localBAll ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getBAll(){
                           return localBAll;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BAll
                           */
                           public void setBAll(boolean param){
                        
                                        this.localBAll=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":StateChangeType",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "StateChangeType",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "bCompChange", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("bCompChange cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBCompChange));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "bCompDelete", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("bCompDelete cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBCompDelete));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "bRelChange", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("bRelChange cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBRelChange));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "bRelDelete", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("bRelDelete cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBRelDelete));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "bAll", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("bAll cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBAll));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "bCompChange"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBCompChange));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "bCompDelete"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBCompDelete));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "bRelChange"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBRelChange));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "bRelDelete"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBRelDelete));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "bAll"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBAll));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StateChangeType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StateChangeType object =
            new StateChangeType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"StateChangeType".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (StateChangeType)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bCompChange").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBCompChange(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bCompDelete").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBCompDelete(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bRelChange").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBRelChange(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bRelDelete").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBRelDelete(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bAll").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBAll(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Context_ack
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "context_ack",
            "");

        

                    /**
                    * field for Context_ack
                    */

                    
                                protected java.lang.String localContext_ack ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext_ack(){
                           return localContext_ack;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context_ack
                           */
                           public void setContext_ack(java.lang.String param){
                        
                                        this.localContext_ack=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "context_ack";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":context_ack",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "context_ack",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localContext_ack==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localContext_ack);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localContext_ack==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext_ack)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Context_ack parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Context_ack object =
            new Context_ack();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","context_ack").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext_ack(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StartDate
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "startDate",
            "");

        

                    /**
                    * field for StartDate
                    */

                    
                                protected java.util.Calendar localStartDate ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.util.Calendar
                       */
                       public  java.util.Calendar getStartDate(){
                           return localStartDate;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StartDate
                           */
                           public void setStartDate(java.util.Calendar param){
                        
                                        this.localStartDate=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "startDate";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":startDate",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "startDate",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localStartDate==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localStartDate==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StartDate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StartDate object =
            new StartDate();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","startDate").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStartDate(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetFilterNames
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetFilterNames",
            "");

        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetFilterNames",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetFilterNames",
                       xmlWriter);
               }

           
               }
           
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetFilterNames parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetFilterNames object =
            new GetFilterNames();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetFilterNames".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetFilterNames)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryEvents
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryEvents",
            "");

        

                    /**
                    * field for Query
                    */

                    
                                protected java.lang.String localQuery ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getQuery(){
                           return localQuery;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Query
                           */
                           public void setQuery(java.lang.String param){
                        
                                        this.localQuery=param;
                                

                           }
                        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryEvents",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryEvents",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "query", xmlWriter);
                         

                                      if (localQuery==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localQuery);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "query"));
                             
                                     elementList.add(localQuery==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                                 
                                         elementList.add(localImname==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryEvents parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryEvents object =
            new QueryEvents();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryEvents".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryEvents)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","query").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setQuery(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RetrieveResultHandle
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "retrieveResultHandle",
            "");

        

                    /**
                    * field for RetrieveResultHandle
                    */

                    
                                protected java.lang.String localRetrieveResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getRetrieveResultHandle(){
                           return localRetrieveResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RetrieveResultHandle
                           */
                           public void setRetrieveResultHandle(java.lang.String param){
                        
                                        this.localRetrieveResultHandle=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "retrieveResultHandle";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":retrieveResultHandle",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "retrieveResultHandle",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localRetrieveResultHandle==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localRetrieveResultHandle);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localRetrieveResultHandle==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetrieveResultHandle)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RetrieveResultHandle parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RetrieveResultHandle object =
            new RetrieveResultHandle();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","retrieveResultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setRetrieveResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class OnlyImpacted
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "onlyImpacted",
            "");

        

                    /**
                    * field for OnlyImpacted
                    */

                    
                                protected boolean localOnlyImpacted ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getOnlyImpacted(){
                           return localOnlyImpacted;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param OnlyImpacted
                           */
                           public void setOnlyImpacted(boolean param){
                        
                                        this.localOnlyImpacted=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "onlyImpacted";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":onlyImpacted",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "onlyImpacted",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOnlyImpacted));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOnlyImpacted)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static OnlyImpacted parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        OnlyImpacted object =
            new OnlyImpacted();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","onlyImpacted").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setOnlyImpacted(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SlotsList
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "slotsList",
            "");

        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "slotsList";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":slotsList",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "slotsList",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localSlotsList==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localSlotsList);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localSlotsList==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SlotsList parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SlotsList object =
            new SlotsList();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ServerName
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "serverName",
            "");

        

                    /**
                    * field for ServerName
                    */

                    
                                protected java.lang.String localServerName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getServerName(){
                           return localServerName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ServerName
                           */
                           public void setServerName(java.lang.String param){
                        
                                        this.localServerName=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "serverName";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":serverName",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "serverName",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localServerName==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localServerName);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localServerName==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerName)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ServerName parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ServerName object =
            new ServerName();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","serverName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setServerName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class IMMessageType
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "IMMessageType",
            "");

        

                    /**
                    * field for IMMessageType
                    */

                    
                                protected java.lang.String localIMMessageType ;
                            
                        private static java.util.HashMap _table_ = new java.util.HashMap();

                        // Constructor
                        
                            protected IMMessageType(java.lang.String value, boolean isRegisterValue) {
                                localIMMessageType = value;
                                if (isRegisterValue){
                                    
                                           _table_.put(localIMMessageType, this);
                                       
                                }

                            }
                        
                                public static final java.lang.String _MSG_TYPE_NONE =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_NONE");
                            
                                public static final java.lang.String _MSG_TYPE_NEW_EVENT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_NEW_EVENT");
                            
                                public static final java.lang.String _MSG_TYPE_MOD_EVENT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_MOD_EVENT");
                            
                                public static final java.lang.String _MSG_TYPE_NEW_DATA =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_NEW_DATA");
                            
                                public static final java.lang.String _MSG_TYPE_OVERWRITE_DATA =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_OVERWRITE_DATA");
                            
                                public static final java.lang.String _MSG_TYPE_MOD_DATA =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MSG_TYPE_MOD_DATA");
                            
                            public static final IMMessageType MSG_TYPE_NONE =
                                new IMMessageType(_MSG_TYPE_NONE,true);
                        
                            public static final IMMessageType MSG_TYPE_NEW_EVENT =
                                new IMMessageType(_MSG_TYPE_NEW_EVENT,true);
                        
                            public static final IMMessageType MSG_TYPE_MOD_EVENT =
                                new IMMessageType(_MSG_TYPE_MOD_EVENT,true);
                        
                            public static final IMMessageType MSG_TYPE_NEW_DATA =
                                new IMMessageType(_MSG_TYPE_NEW_DATA,true);
                        
                            public static final IMMessageType MSG_TYPE_OVERWRITE_DATA =
                                new IMMessageType(_MSG_TYPE_OVERWRITE_DATA,true);
                        
                            public static final IMMessageType MSG_TYPE_MOD_DATA =
                                new IMMessageType(_MSG_TYPE_MOD_DATA,true);
                        

                            public java.lang.String getValue() { return localIMMessageType;}

                            public boolean equals(java.lang.Object obj) {return (obj == this);}
                            public int hashCode() { return toString().hashCode();}
                            public java.lang.String toString() {
                            
                                    return localIMMessageType.toString();
                                

                            }

                    

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = parentQName.getNamespaceURI();
                        java.lang.String _localName = parentQName.getLocalPart();
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":IMMessageType",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "IMMessageType",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localIMMessageType==null){
                                        
                                                 throw new org.apache.axis2.databinding.ADBException("IMMessageType cannot be null !!");
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localIMMessageType);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIMMessageType)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    
            public static IMMessageType fromValue(java.lang.String value)
                  throws java.lang.IllegalArgumentException {
                IMMessageType enumeration = (IMMessageType)
                   
                           _table_.get(value);
                       

                if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }
            public static IMMessageType fromString(java.lang.String value,java.lang.String namespaceURI)
                  throws java.lang.IllegalArgumentException {
                try {
                   
                                   return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                               

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static IMMessageType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                java.lang.String content) {
                if (content.indexOf(":") > -1){
                    java.lang.String prefix = content.substring(0,content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return IMMessageType.Factory.fromString(content,namespaceUri);
                } else {
                   return IMMessageType.Factory.fromString(content,"");
                }
            }
        

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static IMMessageType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        IMMessageType object = null;
            // initialize a hash map to keep values
            java.util.Map attributeMap = new java.util.HashMap();
            java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
        

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement()  || reader.hasText()){
            
                                java.lang.String content = reader.getElementText();
                                
                                    if (content.indexOf(":") > 0) {
                                        // this seems to be a Qname so find the namespace and send
                                        prefix = content.substring(0, content.indexOf(":"));
                                        namespaceuri = reader.getNamespaceURI(prefix);
                                        object = IMMessageType.Factory.fromString(content,namespaceuri);
                                    } else {
                                        // this seems to be not a qname send and empty namespace incase of it is
                                        // check is done in fromString method
                                        object = IMMessageType.Factory.fromString(content,"");
                                    }
                                    
                                    
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class DeleteBuffer
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "deleteBuffer",
            "");

        

                    /**
                    * field for DeleteBuffer
                    */

                    
                                protected boolean localDeleteBuffer ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getDeleteBuffer(){
                           return localDeleteBuffer;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param DeleteBuffer
                           */
                           public void setDeleteBuffer(boolean param){
                        
                                        this.localDeleteBuffer=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "deleteBuffer";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":deleteBuffer",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "deleteBuffer",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteBuffer));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteBuffer)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static DeleteBuffer parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        DeleteBuffer object =
            new DeleteBuffer();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","deleteBuffer").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setDeleteBuffer(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Connect_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "Connect_output",
            "");

        

                    /**
                    * field for ConnectionId
                    */

                    
                                protected long localConnectionId ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getConnectionId(){
                           return localConnectionId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ConnectionId
                           */
                           public void setConnectionId(long param){
                        
                                        this.localConnectionId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Connect_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Connect_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "connectionId", xmlWriter);
                         
                                           if (localConnectionId==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("connectionId cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnectionId));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "connectionId"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnectionId));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Connect_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Connect_output object =
            new Connect_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Connect_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Connect_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","connectionId").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setConnectionId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetFilterNames_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetFilterNames_output",
            "");

        

                    /**
                    * field for StringArray
                    */

                    
                                protected ArrayOf_String localStringArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_String
                       */
                       public  ArrayOf_String getStringArray(){
                           return localStringArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StringArray
                           */
                           public void setStringArray(ArrayOf_String param){
                        
                                        this.localStringArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetFilterNames_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetFilterNames_output",
                       xmlWriter);
               }

           
               }
           
                                        if (localStringArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("StringArray cannot be null!!");
                                        }
                                       localStringArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","StringArray"),
                                           xmlWriter);
                                    
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "StringArray"));
                        
                        
                                if (localStringArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("StringArray cannot be null!!");
                                    }
                                    elementList.add(localStringArray);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetFilterNames_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetFilterNames_output object =
            new GetFilterNames_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetFilterNames_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetFilterNames_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","StringArray").equals(reader.getName())){
                            
                                            object.setStringArray(ArrayOf_String.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Value
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = value
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        
        /** Whenever a new property is set ensure all others are unset
         *  There can be only one choice and the last one wins
         */
        private void clearAllSettingTrackers() {
        
               localByte_valueTracker = false;
            
               localShort_valueTracker = false;
            
               localInt_valueTracker = false;
            
               localLong_valueTracker = false;
            
               localFloat_valueTracker = false;
            
               localDouble_valueTracker = false;
            
               localString_valueTracker = false;
            
               localByteArrayTracker = false;
            
               localShortArrayTracker = false;
            
               localIntArrayTracker = false;
            
               localLongArrayTracker = false;
            
               localFloatArrayTracker = false;
            
               localDoubleArrayTracker = false;
            
               localStringArrayTracker = false;
            
        }
    

                    /**
                    * field for Byte_value
                    */

                    
                                protected byte localByte_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localByte_valueTracker = false ;

                       public boolean isByte_valueSpecified(){
                           return localByte_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return byte
                       */
                       public  byte getByte_value(){
                           return localByte_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Byte_value
                           */
                           public void setByte_value(byte param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localByte_valueTracker =
                                   param != java.lang.Byte.MIN_VALUE;
                               
                                        this.localByte_value=param;
                                

                           }
                        

                    /**
                    * field for Short_value
                    */

                    
                                protected short localShort_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localShort_valueTracker = false ;

                       public boolean isShort_valueSpecified(){
                           return localShort_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return short
                       */
                       public  short getShort_value(){
                           return localShort_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Short_value
                           */
                           public void setShort_value(short param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localShort_valueTracker =
                                   param != java.lang.Short.MIN_VALUE;
                               
                                        this.localShort_value=param;
                                

                           }
                        

                    /**
                    * field for Int_value
                    */

                    
                                protected int localInt_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localInt_valueTracker = false ;

                       public boolean isInt_valueSpecified(){
                           return localInt_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getInt_value(){
                           return localInt_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Int_value
                           */
                           public void setInt_value(int param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localInt_valueTracker =
                                   param != java.lang.Integer.MIN_VALUE;
                               
                                        this.localInt_value=param;
                                

                           }
                        

                    /**
                    * field for Long_value
                    */

                    
                                protected long localLong_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localLong_valueTracker = false ;

                       public boolean isLong_valueSpecified(){
                           return localLong_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getLong_value(){
                           return localLong_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Long_value
                           */
                           public void setLong_value(long param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localLong_valueTracker =
                                   param != java.lang.Long.MIN_VALUE;
                               
                                        this.localLong_value=param;
                                

                           }
                        

                    /**
                    * field for Float_value
                    */

                    
                                protected float localFloat_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localFloat_valueTracker = false ;

                       public boolean isFloat_valueSpecified(){
                           return localFloat_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return float
                       */
                       public  float getFloat_value(){
                           return localFloat_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Float_value
                           */
                           public void setFloat_value(float param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localFloat_valueTracker =
                                   !java.lang.Float.isNaN(param);
                               
                                        this.localFloat_value=param;
                                

                           }
                        

                    /**
                    * field for Double_value
                    */

                    
                                protected double localDouble_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localDouble_valueTracker = false ;

                       public boolean isDouble_valueSpecified(){
                           return localDouble_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return double
                       */
                       public  double getDouble_value(){
                           return localDouble_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Double_value
                           */
                           public void setDouble_value(double param){
                        
                            clearAllSettingTrackers();
                        
                                   // setting primitive attribute tracker to true
                                   localDouble_valueTracker =
                                   !java.lang.Double.isNaN(param);
                               
                                        this.localDouble_value=param;
                                

                           }
                        

                    /**
                    * field for String_value
                    */

                    
                                protected java.lang.String localString_value ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localString_valueTracker = false ;

                       public boolean isString_valueSpecified(){
                           return localString_valueTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getString_value(){
                           return localString_value;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param String_value
                           */
                           public void setString_value(java.lang.String param){
                        
                            clearAllSettingTrackers();
                        localString_valueTracker = param != null;
                               
                                        this.localString_value=param;
                                

                           }
                        

                    /**
                    * field for ByteArray
                    */

                    
                                protected ArrayOf_Byte localByteArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localByteArrayTracker = false ;

                       public boolean isByteArraySpecified(){
                           return localByteArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Byte
                       */
                       public  ArrayOf_Byte getByteArray(){
                           return localByteArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ByteArray
                           */
                           public void setByteArray(ArrayOf_Byte param){
                        
                            clearAllSettingTrackers();
                        localByteArrayTracker = param != null;
                               
                                        this.localByteArray=param;
                                

                           }
                        

                    /**
                    * field for ShortArray
                    */

                    
                                protected ArrayOf_Short localShortArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localShortArrayTracker = false ;

                       public boolean isShortArraySpecified(){
                           return localShortArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Short
                       */
                       public  ArrayOf_Short getShortArray(){
                           return localShortArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ShortArray
                           */
                           public void setShortArray(ArrayOf_Short param){
                        
                            clearAllSettingTrackers();
                        localShortArrayTracker = param != null;
                               
                                        this.localShortArray=param;
                                

                           }
                        

                    /**
                    * field for IntArray
                    */

                    
                                protected ArrayOf_Int localIntArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localIntArrayTracker = false ;

                       public boolean isIntArraySpecified(){
                           return localIntArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Int
                       */
                       public  ArrayOf_Int getIntArray(){
                           return localIntArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param IntArray
                           */
                           public void setIntArray(ArrayOf_Int param){
                        
                            clearAllSettingTrackers();
                        localIntArrayTracker = param != null;
                               
                                        this.localIntArray=param;
                                

                           }
                        

                    /**
                    * field for LongArray
                    */

                    
                                protected ArrayOf_Long localLongArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localLongArrayTracker = false ;

                       public boolean isLongArraySpecified(){
                           return localLongArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Long
                       */
                       public  ArrayOf_Long getLongArray(){
                           return localLongArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param LongArray
                           */
                           public void setLongArray(ArrayOf_Long param){
                        
                            clearAllSettingTrackers();
                        localLongArrayTracker = param != null;
                               
                                        this.localLongArray=param;
                                

                           }
                        

                    /**
                    * field for FloatArray
                    */

                    
                                protected ArrayOf_Float localFloatArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localFloatArrayTracker = false ;

                       public boolean isFloatArraySpecified(){
                           return localFloatArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Float
                       */
                       public  ArrayOf_Float getFloatArray(){
                           return localFloatArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FloatArray
                           */
                           public void setFloatArray(ArrayOf_Float param){
                        
                            clearAllSettingTrackers();
                        localFloatArrayTracker = param != null;
                               
                                        this.localFloatArray=param;
                                

                           }
                        

                    /**
                    * field for DoubleArray
                    */

                    
                                protected ArrayOf_Double localDoubleArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localDoubleArrayTracker = false ;

                       public boolean isDoubleArraySpecified(){
                           return localDoubleArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Double
                       */
                       public  ArrayOf_Double getDoubleArray(){
                           return localDoubleArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param DoubleArray
                           */
                           public void setDoubleArray(ArrayOf_Double param){
                        
                            clearAllSettingTrackers();
                        localDoubleArrayTracker = param != null;
                               
                                        this.localDoubleArray=param;
                                

                           }
                        

                    /**
                    * field for StringArray
                    */

                    
                                protected ArrayOf_String localStringArray ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localStringArrayTracker = false ;

                       public boolean isStringArraySpecified(){
                           return localStringArrayTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_String
                       */
                       public  ArrayOf_String getStringArray(){
                           return localStringArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StringArray
                           */
                           public void setStringArray(ArrayOf_String param){
                        
                            clearAllSettingTrackers();
                        localStringArrayTracker = param != null;
                               
                                        this.localStringArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":value",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "value",
                       xmlWriter);
               }

           
               }
            if (localByte_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "byte_value", xmlWriter);
                         
                                           if (localByte_value==java.lang.Byte.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("byte_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localByte_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localShort_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "short_value", xmlWriter);
                         
                                           if (localShort_value==java.lang.Short.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("short_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShort_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localInt_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "int_value", xmlWriter);
                         
                                           if (localInt_value==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("int_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInt_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localLong_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "long_value", xmlWriter);
                         
                                           if (localLong_value==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("long_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localFloat_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "float_value", xmlWriter);
                         
                                           if (java.lang.Float.isNaN(localFloat_value)) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("float_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFloat_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localDouble_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "double_value", xmlWriter);
                         
                                           if (java.lang.Double.isNaN(localDouble_value)) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("double_value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDouble_value));
                                           }
                                
                               xmlWriter.writeEndElement();
                         } if (localString_valueTracker){
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "string_value", xmlWriter);
                         

                                      if (localString_value==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("string_value cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localString_value);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         } if (localByteArrayTracker){
                                        if (localByteArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("ByteArray cannot be null!!");
                                        }
                                       localByteArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ByteArray"),
                                           xmlWriter);
                                    } if (localShortArrayTracker){
                                        if (localShortArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("ShortArray cannot be null!!");
                                        }
                                       localShortArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ShortArray"),
                                           xmlWriter);
                                    } if (localIntArrayTracker){
                                        if (localIntArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("IntArray cannot be null!!");
                                        }
                                       localIntArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","IntArray"),
                                           xmlWriter);
                                    } if (localLongArrayTracker){
                                        if (localLongArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("LongArray cannot be null!!");
                                        }
                                       localLongArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","LongArray"),
                                           xmlWriter);
                                    } if (localFloatArrayTracker){
                                        if (localFloatArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("FloatArray cannot be null!!");
                                        }
                                       localFloatArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","FloatArray"),
                                           xmlWriter);
                                    } if (localDoubleArrayTracker){
                                        if (localDoubleArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("DoubleArray cannot be null!!");
                                        }
                                       localDoubleArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","DoubleArray"),
                                           xmlWriter);
                                    } if (localStringArrayTracker){
                                        if (localStringArray==null){
                                             throw new org.apache.axis2.databinding.ADBException("StringArray cannot be null!!");
                                        }
                                       localStringArray.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","StringArray"),
                                           xmlWriter);
                                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localByte_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "byte_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localByte_value));
                        } if (localShort_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "short_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShort_value));
                        } if (localInt_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "int_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInt_value));
                        } if (localLong_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "long_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_value));
                        } if (localFloat_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "float_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFloat_value));
                        } if (localDouble_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "double_value"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDouble_value));
                        } if (localString_valueTracker){
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "string_value"));
                             
                                    if (localString_value != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString_value));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("string_value cannot be null!!");
                                    }
                                } if (localByteArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "ByteArray"));
                        
                        
                                if (localByteArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("ByteArray cannot be null!!");
                                }
                                elementList.add(localByteArray);
                            } if (localShortArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "ShortArray"));
                        
                        
                                if (localShortArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("ShortArray cannot be null!!");
                                }
                                elementList.add(localShortArray);
                            } if (localIntArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "IntArray"));
                        
                        
                                if (localIntArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("IntArray cannot be null!!");
                                }
                                elementList.add(localIntArray);
                            } if (localLongArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "LongArray"));
                        
                        
                                if (localLongArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("LongArray cannot be null!!");
                                }
                                elementList.add(localLongArray);
                            } if (localFloatArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "FloatArray"));
                        
                        
                                if (localFloatArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("FloatArray cannot be null!!");
                                }
                                elementList.add(localFloatArray);
                            } if (localDoubleArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "DoubleArray"));
                        
                        
                                if (localDoubleArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("DoubleArray cannot be null!!");
                                }
                                elementList.add(localDoubleArray);
                            } if (localStringArrayTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "StringArray"));
                        
                        
                                if (localStringArray==null){
                                     throw new org.apache.axis2.databinding.ADBException("StringArray cannot be null!!");
                                    }
                                    elementList.add(localStringArray);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Value parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Value object =
            new Value();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"value".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Value)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","byte_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setByte_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToByte(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","short_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setShort_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToShort(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","int_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setInt_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","long_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setLong_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","float_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFloat_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","double_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setDouble_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","string_value").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setString_value(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ByteArray").equals(reader.getName())){
                            
                                            object.setByteArray(ArrayOf_Byte.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ShortArray").equals(reader.getName())){
                            
                                            object.setShortArray(ArrayOf_Short.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","IntArray").equals(reader.getName())){
                            
                                            object.setIntArray(ArrayOf_Int.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","LongArray").equals(reader.getName())){
                            
                                            object.setLongArray(ArrayOf_Long.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","FloatArray").equals(reader.getName())){
                            
                                            object.setFloatArray(ArrayOf_Float.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","DoubleArray").equals(reader.getName())){
                            
                                            object.setDoubleArray(ArrayOf_Double.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                    else
                                
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","StringArray").equals(reader.getName())){
                            
                                            object.setStringArray(ArrayOf_String.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class IMBufferType
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "IMBufferType",
            "");

        

                    /**
                    * field for IMBufferType
                    */

                    
                                protected java.lang.String localIMBufferType ;
                            
                        private static java.util.HashMap _table_ = new java.util.HashMap();

                        // Constructor
                        
                            protected IMBufferType(java.lang.String value, boolean isRegisterValue) {
                                localIMBufferType = value;
                                if (isRegisterValue){
                                    
                                           _table_.put(localIMBufferType, this);
                                       
                                }

                            }
                        
                                public static final java.lang.String _BMCII_BUFFER_MODE_DEFAULT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_BUFFER_MODE_DEFAULT");
                            
                                public static final java.lang.String _BMCII_BUFFER_MODE_NONE =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_BUFFER_MODE_NONE");
                            
                                public static final java.lang.String _BMCII_BUFFER_MODE_LOW =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_BUFFER_MODE_LOW");
                            
                                public static final java.lang.String _BMCII_BUFFER_MODE_HIGH =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_BUFFER_MODE_HIGH");
                            
                            public static final IMBufferType BMCII_BUFFER_MODE_DEFAULT =
                                new IMBufferType(_BMCII_BUFFER_MODE_DEFAULT,true);
                        
                            public static final IMBufferType BMCII_BUFFER_MODE_NONE =
                                new IMBufferType(_BMCII_BUFFER_MODE_NONE,true);
                        
                            public static final IMBufferType BMCII_BUFFER_MODE_LOW =
                                new IMBufferType(_BMCII_BUFFER_MODE_LOW,true);
                        
                            public static final IMBufferType BMCII_BUFFER_MODE_HIGH =
                                new IMBufferType(_BMCII_BUFFER_MODE_HIGH,true);
                        

                            public java.lang.String getValue() { return localIMBufferType;}

                            public boolean equals(java.lang.Object obj) {return (obj == this);}
                            public int hashCode() { return toString().hashCode();}
                            public java.lang.String toString() {
                            
                                    return localIMBufferType.toString();
                                

                            }

                    

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = parentQName.getNamespaceURI();
                        java.lang.String _localName = parentQName.getLocalPart();
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":IMBufferType",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "IMBufferType",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localIMBufferType==null){
                                        
                                                 throw new org.apache.axis2.databinding.ADBException("IMBufferType cannot be null !!");
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localIMBufferType);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIMBufferType)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    
            public static IMBufferType fromValue(java.lang.String value)
                  throws java.lang.IllegalArgumentException {
                IMBufferType enumeration = (IMBufferType)
                   
                           _table_.get(value);
                       

                if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }
            public static IMBufferType fromString(java.lang.String value,java.lang.String namespaceURI)
                  throws java.lang.IllegalArgumentException {
                try {
                   
                                   return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                               

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static IMBufferType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                java.lang.String content) {
                if (content.indexOf(":") > -1){
                    java.lang.String prefix = content.substring(0,content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return IMBufferType.Factory.fromString(content,namespaceUri);
                } else {
                   return IMBufferType.Factory.fromString(content,"");
                }
            }
        

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static IMBufferType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        IMBufferType object = null;
            // initialize a hash map to keep values
            java.util.Map attributeMap = new java.util.HashMap();
            java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
        

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement()  || reader.hasText()){
            
                                java.lang.String content = reader.getElementText();
                                
                                    if (content.indexOf(":") > 0) {
                                        // this seems to be a Qname so find the namespace and send
                                        prefix = content.substring(0, content.indexOf(":"));
                                        namespaceuri = reader.getNamespaceURI(prefix);
                                        object = IMBufferType.Factory.fromString(content,namespaceuri);
                                    } else {
                                        // this seems to be not a qname send and empty namespace incase of it is
                                        // check is done in fromString method
                                        object = IMBufferType.Factory.fromString(content,"");
                                    }
                                    
                                    
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Condition
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "condition",
            "");

        

                    /**
                    * field for Condition
                    */

                    
                                protected java.lang.String localCondition ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCondition(){
                           return localCondition;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Condition
                           */
                           public void setCondition(java.lang.String param){
                        
                                        this.localCondition=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "condition";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":condition",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "condition",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localCondition==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localCondition);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localCondition==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCondition)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Condition parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Condition object =
            new Condition();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","condition").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCondition(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RetrieveQueryResultResponse
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = RetrieveQueryResultResponse
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Response
                    */

                    
                                protected TableOf_NameValue localResponse ;
                            

                       /**
                       * Auto generated getter method
                       * @return TableOf_NameValue
                       */
                       public  TableOf_NameValue getResponse(){
                           return localResponse;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Response
                           */
                           public void setResponse(TableOf_NameValue param){
                        
                                        this.localResponse=param;
                                

                           }
                        

                    /**
                    * field for Num_of_results
                    */

                    
                                protected int localNum_of_results ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_results(){
                           return localNum_of_results;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_results
                           */
                           public void setNum_of_results(int param){
                        
                                        this.localNum_of_results=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":RetrieveQueryResultResponse",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "RetrieveQueryResultResponse",
                       xmlWriter);
               }

           
               }
           
                                        if (localResponse==null){
                                             throw new org.apache.axis2.databinding.ADBException("response cannot be null!!");
                                        }
                                       localResponse.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","response"),
                                           xmlWriter);
                                    
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "num_of_results", xmlWriter);
                         
                                           if (localNum_of_results==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_results cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_results));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "response"));
                        
                        
                                if (localResponse==null){
                                     throw new org.apache.axis2.databinding.ADBException("response cannot be null!!");
                                }
                                elementList.add(localResponse);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "num_of_results"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_results));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RetrieveQueryResultResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RetrieveQueryResultResponse object =
            new RetrieveQueryResultResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"RetrieveQueryResultResponse".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (RetrieveQueryResultResponse)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","response").equals(reader.getName())){
                            
                                            object.setResponse(TableOf_NameValue.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","num_of_results").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_results(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Short
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Short
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Short_element
                    * This was an Array!
                    */

                    
                                protected short[] localShort_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localShort_elementTracker = false ;

                       public boolean isShort_elementSpecified(){
                           return localShort_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return short[]
                       */
                       public  short[] getShort_element(){
                           return localShort_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Short_element
                           */
                          protected void validateShort_element(short[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Short_element
                          */
                          public void setShort_element(short[] param){
                          
                               validateShort_element(param);

                           localShort_elementTracker = param != null;
                                  
                                  this.localShort_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Short",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Short",
                       xmlWriter);
               }

           
               }
            if (localShort_elementTracker){
                         if (localShort_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localShort_element.length;i++){
                                    
                                               if (localShort_element[i]!=java.lang.Short.MIN_VALUE) {
                                           
                                            writeStartElement(null, namespace, "short_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShort_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("short_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localShort_elementTracker){
                        if (localShort_element!=null){
                              for (int i = 0;i < localShort_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "short_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localShort_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("short_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Short parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Short object =
            new ArrayOf_Short();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Short".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Short)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","short_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","short_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setShort_element((short[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        short.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class MessageClass
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "messageClass",
            "");

        

                    /**
                    * field for MessageClass
                    */

                    
                                protected java.lang.String localMessageClass ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getMessageClass(){
                           return localMessageClass;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param MessageClass
                           */
                           public void setMessageClass(java.lang.String param){
                        
                                        this.localMessageClass=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "messageClass";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":messageClass",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "messageClass",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localMessageClass==null){
                                        
                                                 throw new org.apache.axis2.databinding.ADBException("messageClass cannot be null !!");
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localMessageClass);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageClass)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static MessageClass parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        MessageClass object =
            new MessageClass();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","messageClass").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setMessageClass(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SetMaintenanceMode
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SetMaintenanceMode",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

                    /**
                    * field for SetOrCleared
                    */

                    
                                protected int localSetOrCleared ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getSetOrCleared(){
                           return localSetOrCleared;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SetOrCleared
                           */
                           public void setSetOrCleared(int param){
                        
                                        this.localSetOrCleared=param;
                                

                           }
                        

                    /**
                    * field for ModeToSet
                    */

                    
                                protected java.lang.String localModeToSet ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getModeToSet(){
                           return localModeToSet;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ModeToSet
                           */
                           public void setModeToSet(java.lang.String param){
                        
                                        this.localModeToSet=param;
                                

                           }
                        

                    /**
                    * field for Comment
                    */

                    
                                protected java.lang.String localComment ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComment(){
                           return localComment;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Comment
                           */
                           public void setComment(java.lang.String param){
                        
                                        this.localComment=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SetMaintenanceMode",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SetMaintenanceMode",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "setOrCleared", xmlWriter);
                         
                                           if (localSetOrCleared==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSetOrCleared));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "modeToSet", xmlWriter);
                         

                                      if (localModeToSet==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localModeToSet);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "comment", xmlWriter);
                         

                                      if (localComment==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComment);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                             
                                     elementList.add(localComponentId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "setOrCleared"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSetOrCleared));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "modeToSet"));
                             
                                     elementList.add(localModeToSet==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModeToSet));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "comment"));
                                 
                                         elementList.add(localComment==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComment));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SetMaintenanceMode parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SetMaintenanceMode object =
            new SetMaintenanceMode();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SetMaintenanceMode".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SetMaintenanceMode)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","setOrCleared").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSetOrCleared(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setSetOrCleared(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","modeToSet").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setModeToSet(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","comment").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComment(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryComponentEvents
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryComponentEvents",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

                    /**
                    * field for OnlyImpacted
                    */

                    
                                protected boolean localOnlyImpacted ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getOnlyImpacted(){
                           return localOnlyImpacted;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param OnlyImpacted
                           */
                           public void setOnlyImpacted(boolean param){
                        
                                        this.localOnlyImpacted=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryComponentEvents",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryComponentEvents",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "onlyImpacted", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("onlyImpacted cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOnlyImpacted));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                             
                                     elementList.add(localComponentId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                             
                                     elementList.add(localSlotsList==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "onlyImpacted"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOnlyImpacted));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryComponentEvents parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryComponentEvents object =
            new QueryComponentEvents();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryComponentEvents".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryComponentEvents)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","onlyImpacted").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setOnlyImpacted(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class TrueCause
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "trueCause",
            "");

        

                    /**
                    * field for TrueCause
                    */

                    
                                protected boolean localTrueCause ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getTrueCause(){
                           return localTrueCause;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param TrueCause
                           */
                           public void setTrueCause(boolean param){
                        
                                        this.localTrueCause=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "trueCause";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":trueCause",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "trueCause",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTrueCause));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTrueCause)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static TrueCause parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        TrueCause object =
            new TrueCause();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","trueCause").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTrueCause(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ErrorCode
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "errorCode",
            "");

        

                    /**
                    * field for ErrorCode
                    */

                    
                                protected int localErrorCode ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getErrorCode(){
                           return localErrorCode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ErrorCode
                           */
                           public void setErrorCode(int param){
                        
                                        this.localErrorCode=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "errorCode";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":errorCode",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "errorCode",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localErrorCode==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ErrorCode parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ErrorCode object =
            new ErrorCode();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                                       object.setErrorCode(java.lang.Integer.MIN_VALUE);
                                   
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","errorCode").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setErrorCode(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setErrorCode(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ImFailure
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "imFailure",
            "");

        

                    /**
                    * field for ImFailure
                    */

                    
                                protected java.lang.String localImFailure ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImFailure(){
                           return localImFailure;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ImFailure
                           */
                           public void setImFailure(java.lang.String param){
                        
                                        this.localImFailure=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "imFailure";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":imFailure",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "imFailure",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localImFailure==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localImFailure);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localImFailure==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImFailure)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ImFailure parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ImFailure object =
            new ImFailure();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","imFailure").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImFailure(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class MessageType
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "messageType",
            "");

        

                    /**
                    * field for MessageType
                    */

                    
                                protected IMMessageType localMessageType ;
                            

                       /**
                       * Auto generated getter method
                       * @return IMMessageType
                       */
                       public  IMMessageType getMessageType(){
                           return localMessageType;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param MessageType
                           */
                           public void setMessageType(IMMessageType param){
                        
                                        this.localMessageType=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                                  if (localMessageType==null){
                                    java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                                    writeStartElement(null, namespace, "messageType", xmlWriter);

                                    // write the nil attribute
                                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                    xmlWriter.writeEndElement();
                                   }else{
                                     localMessageType.serialize(MY_QNAME,xmlWriter);
                                   }
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localMessageType==null){
                                   return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return localMessageType.getPullParser(MY_QNAME);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static MessageType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        MessageType object =
            new MessageType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","messageType").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setMessageType(null);
                                      reader.next();
                                      
                                  }else{
                                
                                            object.setMessageType(IMMessageType.Factory.parse(reader));
                                        }
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ComponentStatus
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "componentStatus",
            "");

        

                    /**
                    * field for ComponentStatus
                    */

                    
                                protected java.lang.String localComponentStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentStatus(){
                           return localComponentStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentStatus
                           */
                           public void setComponentStatus(java.lang.String param){
                        
                                        this.localComponentStatus=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "componentStatus";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":componentStatus",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "componentStatus",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localComponentStatus==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localComponentStatus);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localComponentStatus==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentStatus)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ComponentStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ComponentStatus object =
            new ComponentStatus();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","componentStatus").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class BufferType
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "bufferType",
            "");

        

                    /**
                    * field for BufferType
                    */

                    
                                protected IMBufferType localBufferType ;
                            

                       /**
                       * Auto generated getter method
                       * @return IMBufferType
                       */
                       public  IMBufferType getBufferType(){
                           return localBufferType;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BufferType
                           */
                           public void setBufferType(IMBufferType param){
                        
                                        this.localBufferType=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                                  if (localBufferType==null){
                                    java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                                    writeStartElement(null, namespace, "bufferType", xmlWriter);

                                    // write the nil attribute
                                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                    xmlWriter.writeEndElement();
                                   }else{
                                     localBufferType.serialize(MY_QNAME,xmlWriter);
                                   }
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localBufferType==null){
                                   return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return localBufferType.getPullParser(MY_QNAME);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static BufferType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        BufferType object =
            new BufferType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","bufferType").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setBufferType(null);
                                      reader.next();
                                      
                                  }else{
                                
                                            object.setBufferType(IMBufferType.Factory.parse(reader));
                                        }
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RegisterStateChange
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "RegisterStateChange",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ServerName
                    */

                    
                                protected java.lang.String localServerName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getServerName(){
                           return localServerName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ServerName
                           */
                           public void setServerName(java.lang.String param){
                        
                                        this.localServerName=param;
                                

                           }
                        

                    /**
                    * field for ChangeType
                    */

                    
                                protected StateChangeType localChangeType ;
                            

                       /**
                       * Auto generated getter method
                       * @return StateChangeType
                       */
                       public  StateChangeType getChangeType(){
                           return localChangeType;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ChangeType
                           */
                           public void setChangeType(StateChangeType param){
                        
                                        this.localChangeType=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":RegisterStateChange",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "RegisterStateChange",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "serverName", xmlWriter);
                         

                                      if (localServerName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localServerName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                        if (localChangeType==null){
                                             throw new org.apache.axis2.databinding.ADBException("changeType cannot be null!!");
                                        }
                                       localChangeType.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","changeType"),
                                           xmlWriter);
                                    
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "serverName"));
                             
                                     elementList.add(localServerName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServerName));
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "changeType"));
                        
                        
                                if (localChangeType==null){
                                     throw new org.apache.axis2.databinding.ADBException("changeType cannot be null!!");
                                    }
                                    elementList.add(localChangeType);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RegisterStateChange parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RegisterStateChange object =
            new RegisterStateChange();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"RegisterStateChange".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (RegisterStateChange)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","serverName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setServerName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","changeType").equals(reader.getName())){
                            
                                            object.setChangeType(StateChangeType.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetQueryResultCount
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetQueryResultCount",
            "");

        

                    /**
                    * field for ResultHandle
                    */

                    
                                protected java.lang.String localResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getResultHandle(){
                           return localResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultHandle
                           */
                           public void setResultHandle(java.lang.String param){
                        
                                        this.localResultHandle=param;
                                

                           }
                        

                    /**
                    * field for Timeout
                    */

                    
                                protected int localTimeout ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getTimeout(){
                           return localTimeout;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Timeout
                           */
                           public void setTimeout(int param){
                        
                                        this.localTimeout=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetQueryResultCount",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetQueryResultCount",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultHandle", xmlWriter);
                         

                                      if (localResultHandle==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localResultHandle);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "timeout", xmlWriter);
                         
                                           if (localTimeout==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("timeout cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultHandle"));
                             
                                     elementList.add(localResultHandle==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultHandle));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "timeout"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetQueryResultCount parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetQueryResultCount object =
            new GetQueryResultCount();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetQueryResultCount".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetQueryResultCount)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","timeout").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTimeout(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CStatusLow
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "cStatusLow",
            "");

        

                    /**
                    * field for CStatusLow
                    */

                    
                                protected java.lang.String localCStatusLow ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCStatusLow(){
                           return localCStatusLow;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CStatusLow
                           */
                           public void setCStatusLow(java.lang.String param){
                        
                                        this.localCStatusLow=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "cStatusLow";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":cStatusLow",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "cStatusLow",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localCStatusLow==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localCStatusLow);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localCStatusLow==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCStatusLow)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CStatusLow parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CStatusLow object =
            new CStatusLow();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cStatusLow").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCStatusLow(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SMComponent extends ArrayOf_NameValue
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = SMComponent
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SMComponent",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SMComponent",
                       xmlWriter);
               }

            if (localNameValue_elementTracker){
                                   if (localNameValue_element!=null){
                                        for (int i = 0;i < localNameValue_element.length;i++){
                                            if (localNameValue_element[i] != null){
                                             localNameValue_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
                attribList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponent"));
             if (localNameValue_elementTracker){
                         if (localNameValue_element!=null) {
                             for (int i = 0;i < localNameValue_element.length;i++){

                                if (localNameValue_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                      "NameValue_element"));
                                     elementList.add(localNameValue_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SMComponent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SMComponent object =
            new SMComponent();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SMComponent".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SMComponent)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                   
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(NameValue.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                                                                list1.add(NameValue.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setNameValue_element((NameValue[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            NameValue.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Int
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Int
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Int_element
                    * This was an Array!
                    */

                    
                                protected int[] localInt_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localInt_elementTracker = false ;

                       public boolean isInt_elementSpecified(){
                           return localInt_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return int[]
                       */
                       public  int[] getInt_element(){
                           return localInt_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Int_element
                           */
                          protected void validateInt_element(int[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Int_element
                          */
                          public void setInt_element(int[] param){
                          
                               validateInt_element(param);

                           localInt_elementTracker = param != null;
                                  
                                  this.localInt_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Int",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Int",
                       xmlWriter);
               }

           
               }
            if (localInt_elementTracker){
                         if (localInt_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localInt_element.length;i++){
                                    
                                               if (localInt_element[i]!=java.lang.Integer.MIN_VALUE) {
                                           
                                            writeStartElement(null, namespace, "int_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInt_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("int_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localInt_elementTracker){
                        if (localInt_element!=null){
                              for (int i = 0;i < localInt_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "int_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localInt_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("int_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Int parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Int object =
            new ArrayOf_Int();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Int".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Int)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","int_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","int_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setInt_element((int[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        int.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Context_nio
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "context_nio",
            "");

        

                    /**
                    * field for Context_nio
                    */

                    
                                protected java.lang.String localContext_nio ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext_nio(){
                           return localContext_nio;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context_nio
                           */
                           public void setContext_nio(java.lang.String param){
                        
                                        this.localContext_nio=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "context_nio";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":context_nio",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "context_nio",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localContext_nio==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localContext_nio);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localContext_nio==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext_nio)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Context_nio parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Context_nio object =
            new Context_nio();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","context_nio").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext_nio(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Comment
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "comment",
            "");

        

                    /**
                    * field for Comment
                    */

                    
                                protected java.lang.String localComment ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComment(){
                           return localComment;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Comment
                           */
                           public void setComment(java.lang.String param){
                        
                                        this.localComment=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "comment";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":comment",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "comment",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localComment==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localComment);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localComment==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComment)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Comment parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Comment object =
            new Comment();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","comment").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComment(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ShortArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "ShortArray",
            "");

        

                    /**
                    * field for ShortArray
                    */

                    
                                protected ArrayOf_Short localShortArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Short
                       */
                       public  ArrayOf_Short getShortArray(){
                           return localShortArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ShortArray
                           */
                           public void setShortArray(ArrayOf_Short param){
                        
                                        this.localShortArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localShortArray==null){
                               throw new org.apache.axis2.databinding.ADBException("ShortArray cannot be null!");
                             }
                             localShortArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localShortArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ShortArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ShortArray object =
            new ShortArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ShortArray").equals(reader.getName())){
                            
                                            object.setShortArray(ArrayOf_Short.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetEventsResponse
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = GetEventsResponse
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Response
                    */

                    
                                protected ArrayOf_Event localResponse ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Event
                       */
                       public  ArrayOf_Event getResponse(){
                           return localResponse;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Response
                           */
                           public void setResponse(ArrayOf_Event param){
                        
                                        this.localResponse=param;
                                

                           }
                        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetEventsResponse",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetEventsResponse",
                       xmlWriter);
               }

           
               }
           
                                        if (localResponse==null){
                                             throw new org.apache.axis2.databinding.ADBException("response cannot be null!!");
                                        }
                                       localResponse.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","response"),
                                           xmlWriter);
                                    
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "num_of_events", xmlWriter);
                         
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_events cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "response"));
                        
                        
                                if (localResponse==null){
                                     throw new org.apache.axis2.databinding.ADBException("response cannot be null!!");
                                }
                                elementList.add(localResponse);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "num_of_events"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetEventsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetEventsResponse object =
            new GetEventsResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetEventsResponse".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetEventsResponse)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","response").equals(reader.getName())){
                            
                                            object.setResponse(ArrayOf_Event.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class EventID
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "eventID",
            "");

        

                    /**
                    * field for EventID
                    */

                    
                                protected java.lang.String localEventID ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getEventID(){
                           return localEventID;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param EventID
                           */
                           public void setEventID(java.lang.String param){
                        
                                        this.localEventID=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "eventID";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":eventID",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "eventID",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localEventID==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localEventID);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localEventID==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEventID)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static EventID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        EventID object =
            new EventID();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","eventID").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setEventID(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Num_of_components
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "num_of_components",
            "");

        

                    /**
                    * field for Num_of_components
                    */

                    
                                protected int localNum_of_components ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_components(){
                           return localNum_of_components;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_components
                           */
                           public void setNum_of_components(int param){
                        
                                        this.localNum_of_components=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "num_of_components";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":num_of_components",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "num_of_components",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localNum_of_components==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_components));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_components)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Num_of_components parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Num_of_components object =
            new Num_of_components();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","num_of_components").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_components(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Imname
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "imname",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "imname";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":imname",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "imname",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localImname==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localImname);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localImname==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Imname parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Imname object =
            new Imname();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class DoubleArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "DoubleArray",
            "");

        

                    /**
                    * field for DoubleArray
                    */

                    
                                protected ArrayOf_Double localDoubleArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Double
                       */
                       public  ArrayOf_Double getDoubleArray(){
                           return localDoubleArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param DoubleArray
                           */
                           public void setDoubleArray(ArrayOf_Double param){
                        
                                        this.localDoubleArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localDoubleArray==null){
                               throw new org.apache.axis2.databinding.ADBException("DoubleArray cannot be null!");
                             }
                             localDoubleArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localDoubleArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static DoubleArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        DoubleArray object =
            new DoubleArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","DoubleArray").equals(reader.getName())){
                            
                                            object.setDoubleArray(ArrayOf_Double.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryComponentsByCondition
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryComponentsByCondition",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for Condition
                    */

                    
                                protected java.lang.String localCondition ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCondition(){
                           return localCondition;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Condition
                           */
                           public void setCondition(java.lang.String param){
                        
                                        this.localCondition=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryComponentsByCondition",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryComponentsByCondition",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "condition", xmlWriter);
                         

                                      if (localCondition==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCondition);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "condition"));
                             
                                     elementList.add(localCondition==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCondition));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                                 
                                         elementList.add(localSlotsList==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryComponentsByCondition parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryComponentsByCondition object =
            new QueryComponentsByCondition();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryComponentsByCondition".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryComponentsByCondition)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","condition").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCondition(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SMComponentArray_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "SMComponentArray_element",
            "");

        

                    /**
                    * field for SMComponentArray_element
                    */

                    
                                protected ArrayOf_SMComponent localSMComponentArray_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_SMComponent
                       */
                       public  ArrayOf_SMComponent getSMComponentArray_element(){
                           return localSMComponentArray_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SMComponentArray_element
                           */
                           public void setSMComponentArray_element(ArrayOf_SMComponent param){
                        
                                        this.localSMComponentArray_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localSMComponentArray_element==null){
                               throw new org.apache.axis2.databinding.ADBException("SMComponentArray_element cannot be null!");
                             }
                             localSMComponentArray_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localSMComponentArray_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SMComponentArray_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SMComponentArray_element object =
            new SMComponentArray_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponentArray_element").equals(reader.getName())){
                            
                                            object.setSMComponentArray_element(ArrayOf_SMComponent.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryComponentsByStatus
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryComponentsByStatus",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for LStatus
                    */

                    
                                protected java.lang.String localLStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getLStatus(){
                           return localLStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param LStatus
                           */
                           public void setLStatus(java.lang.String param){
                        
                                        this.localLStatus=param;
                                

                           }
                        

                    /**
                    * field for HStatus
                    */

                    
                                protected java.lang.String localHStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getHStatus(){
                           return localHStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param HStatus
                           */
                           public void setHStatus(java.lang.String param){
                        
                                        this.localHStatus=param;
                                

                           }
                        

                    /**
                    * field for BaseClass
                    */

                    
                                protected java.lang.String localBaseClass ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getBaseClass(){
                           return localBaseClass;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BaseClass
                           */
                           public void setBaseClass(java.lang.String param){
                        
                                        this.localBaseClass=param;
                                

                           }
                        

                    /**
                    * field for GetSubclasses
                    */

                    
                                protected boolean localGetSubclasses ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getGetSubclasses(){
                           return localGetSubclasses;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param GetSubclasses
                           */
                           public void setGetSubclasses(boolean param){
                        
                                        this.localGetSubclasses=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryComponentsByStatus",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryComponentsByStatus",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "lStatus", xmlWriter);
                         

                                      if (localLStatus==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localLStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "hStatus", xmlWriter);
                         

                                      if (localHStatus==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localHStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "baseClass", xmlWriter);
                         

                                      if (localBaseClass==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localBaseClass);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "getSubclasses", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("getSubclasses cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetSubclasses));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "lStatus"));
                             
                                     elementList.add(localLStatus==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLStatus));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "hStatus"));
                             
                                     elementList.add(localHStatus==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHStatus));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "baseClass"));
                             
                                     elementList.add(localBaseClass==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBaseClass));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "getSubclasses"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetSubclasses));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                                 
                                         elementList.add(localSlotsList==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryComponentsByStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryComponentsByStatus object =
            new QueryComponentsByStatus();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryComponentsByStatus".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryComponentsByStatus)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","lStatus").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setLStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","hStatus").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setHStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","baseClass").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBaseClass(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","getSubclasses").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setGetSubclasses(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Subscribe
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "Subscribe",
            "");

        

                    /**
                    * field for FilterName
                    */

                    
                                protected java.lang.String localFilterName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getFilterName(){
                           return localFilterName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FilterName
                           */
                           public void setFilterName(java.lang.String param){
                        
                                        this.localFilterName=param;
                                

                           }
                        

                    /**
                    * field for Context
                    */

                    
                                protected java.lang.String localContext ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext(){
                           return localContext;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context
                           */
                           public void setContext(java.lang.String param){
                        
                                        this.localContext=param;
                                

                           }
                        

                    /**
                    * field for CallbackURL
                    */

                    
                                protected java.lang.String localCallbackURL ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCallbackURL(){
                           return localCallbackURL;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CallbackURL
                           */
                           public void setCallbackURL(java.lang.String param){
                        
                                        this.localCallbackURL=param;
                                

                           }
                        

                    /**
                    * field for Reliable
                    */

                    
                                protected boolean localReliable ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getReliable(){
                           return localReliable;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Reliable
                           */
                           public void setReliable(boolean param){
                        
                                        this.localReliable=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Subscribe",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Subscribe",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "filterName", xmlWriter);
                         

                                      if (localFilterName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localFilterName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "context", xmlWriter);
                         

                                      if (localContext==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localContext);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "callbackURL", xmlWriter);
                         

                                      if (localCallbackURL==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCallbackURL);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "reliable", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("reliable cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReliable));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "filterName"));
                             
                                     elementList.add(localFilterName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "context"));
                             
                                     elementList.add(localContext==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "callbackURL"));
                             
                                     elementList.add(localCallbackURL==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCallbackURL));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "reliable"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReliable));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Subscribe parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Subscribe object =
            new Subscribe();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Subscribe".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Subscribe)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","filterName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFilterName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","context").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","callbackURL").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCallbackURL(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","reliable").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setReliable(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ClassOnly
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "classOnly",
            "");

        

                    /**
                    * field for ClassOnly
                    */

                    
                                protected boolean localClassOnly ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getClassOnly(){
                           return localClassOnly;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassOnly
                           */
                           public void setClassOnly(boolean param){
                        
                                        this.localClassOnly=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "classOnly";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":classOnly",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "classOnly",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassOnly));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassOnly)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassOnly parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassOnly object =
            new ClassOnly();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","classOnly").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassOnly(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class IntArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "IntArray",
            "");

        

                    /**
                    * field for IntArray
                    */

                    
                                protected ArrayOf_Int localIntArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Int
                       */
                       public  ArrayOf_Int getIntArray(){
                           return localIntArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param IntArray
                           */
                           public void setIntArray(ArrayOf_Int param){
                        
                                        this.localIntArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localIntArray==null){
                               throw new org.apache.axis2.databinding.ADBException("IntArray cannot be null!");
                             }
                             localIntArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localIntArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static IntArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        IntArray object =
            new IntArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","IntArray").equals(reader.getName())){
                            
                                            object.setIntArray(ArrayOf_Int.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_NameValue
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_NameValue
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for NameValue_element
                    * This was an Array!
                    */

                    
                                protected NameValue[] localNameValue_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localNameValue_elementTracker = false ;

                       public boolean isNameValue_elementSpecified(){
                           return localNameValue_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return NameValue[]
                       */
                       public  NameValue[] getNameValue_element(){
                           return localNameValue_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for NameValue_element
                           */
                          protected void validateNameValue_element(NameValue[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param NameValue_element
                          */
                          public void setNameValue_element(NameValue[] param){
                          
                               validateNameValue_element(param);

                           localNameValue_elementTracker = param != null;
                                  
                                  this.localNameValue_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param NameValue
                         */
                         public void addNameValue_element(NameValue param){
                               if (localNameValue_element == null){
                               localNameValue_element = new NameValue[]{};
                               }

                        
                             //update the setting tracker
                            localNameValue_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localNameValue_element);
                           list.add(param);
                           this.localNameValue_element =
                         (NameValue[])list.toArray(
                        new NameValue[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_NameValue",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_NameValue",
                       xmlWriter);
               }

           
               }
            if (localNameValue_elementTracker){
                                   if (localNameValue_element!=null){
                                        for (int i = 0;i < localNameValue_element.length;i++){
                                            if (localNameValue_element[i] != null){
                                             localNameValue_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localNameValue_elementTracker){
                         if (localNameValue_element!=null) {
                             for (int i = 0;i < localNameValue_element.length;i++){

                                if (localNameValue_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                      "NameValue_element"));
                                     elementList.add(localNameValue_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_NameValue parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_NameValue object =
            new ArrayOf_NameValue();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_NameValue".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_NameValue)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(NameValue.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                                                                list1.add(NameValue.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setNameValue_element((NameValue[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            NameValue.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class EventArray_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/Event",
            "EventArray_element",
            "");

        

                    /**
                    * field for EventArray_element
                    */

                    
                                protected ArrayOf_Event localEventArray_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Event
                       */
                       public  ArrayOf_Event getEventArray_element(){
                           return localEventArray_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param EventArray_element
                           */
                           public void setEventArray_element(ArrayOf_Event param){
                        
                                        this.localEventArray_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localEventArray_element==null){
                               throw new org.apache.axis2.databinding.ADBException("EventArray_element cannot be null!");
                             }
                             localEventArray_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/Event")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localEventArray_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static EventArray_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        EventArray_element object =
            new EventArray_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","EventArray_element").equals(reader.getName())){
                            
                                            object.setEventArray_element(ArrayOf_Event.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ClassDefInfo_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "ClassDefInfo_element",
            "");

        

                    /**
                    * field for ClassDefInfo_element
                    */

                    
                                protected ClassDefInfo localClassDefInfo_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return ClassDefInfo
                       */
                       public  ClassDefInfo getClassDefInfo_element(){
                           return localClassDefInfo_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassDefInfo_element
                           */
                           public void setClassDefInfo_element(ClassDefInfo param){
                        
                                        this.localClassDefInfo_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localClassDefInfo_element==null){
                               throw new org.apache.axis2.databinding.ADBException("ClassDefInfo_element cannot be null!");
                             }
                             localClassDefInfo_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localClassDefInfo_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassDefInfo_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassDefInfo_element object =
            new ClassDefInfo_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","ClassDefInfo_element").equals(reader.getName())){
                            
                                            object.setClassDefInfo_element(ClassDefInfo.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetCellInfo
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetCellInfo",
            "");

        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetCellInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetCellInfo",
                       xmlWriter);
               }

           
               }
           
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetCellInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetCellInfo object =
            new GetCellInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetCellInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetCellInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StartIndex_nio
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "startIndex_nio",
            "");

        

                    /**
                    * field for StartIndex_nio
                    */

                    
                                protected long localStartIndex_nio ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getStartIndex_nio(){
                           return localStartIndex_nio;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StartIndex_nio
                           */
                           public void setStartIndex_nio(long param){
                        
                                        this.localStartIndex_nio=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "startIndex_nio";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":startIndex_nio",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "startIndex_nio",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localStartIndex_nio==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex_nio));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex_nio)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StartIndex_nio parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StartIndex_nio object =
            new StartIndex_nio();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","startIndex_nio").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStartIndex_nio(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetSubclasses
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "getSubclasses",
            "");

        

                    /**
                    * field for GetSubclasses
                    */

                    
                                protected boolean localGetSubclasses ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getGetSubclasses(){
                           return localGetSubclasses;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param GetSubclasses
                           */
                           public void setGetSubclasses(boolean param){
                        
                                        this.localGetSubclasses=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "getSubclasses";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":getSubclasses",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "getSubclasses",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetSubclasses));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetSubclasses)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetSubclasses parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetSubclasses object =
            new GetSubclasses();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","getSubclasses").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setGetSubclasses(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SlotDefInfo_Array
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "SlotDefInfo_Array",
            "");

        

                    /**
                    * field for SlotDefInfo_Array
                    */

                    
                                protected ArrayOf_SlotDefInfo localSlotDefInfo_Array ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_SlotDefInfo
                       */
                       public  ArrayOf_SlotDefInfo getSlotDefInfo_Array(){
                           return localSlotDefInfo_Array;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotDefInfo_Array
                           */
                           public void setSlotDefInfo_Array(ArrayOf_SlotDefInfo param){
                        
                                        this.localSlotDefInfo_Array=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localSlotDefInfo_Array==null){
                               throw new org.apache.axis2.databinding.ADBException("SlotDefInfo_Array cannot be null!");
                             }
                             localSlotDefInfo_Array.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localSlotDefInfo_Array.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SlotDefInfo_Array parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SlotDefInfo_Array object =
            new SlotDefInfo_Array();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SlotDefInfo_Array").equals(reader.getName())){
                            
                                            object.setSlotDefInfo_Array(ArrayOf_SlotDefInfo.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class NoValue_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "NoValue_output",
            "");

        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":NoValue_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "NoValue_output",
                       xmlWriter);
               }

           
               }
           
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static NoValue_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        NoValue_output object =
            new NoValue_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"NoValue_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (NoValue_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CellInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = CellInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Cell_name
                    */

                    
                                protected java.lang.String localCell_name ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCell_name(){
                           return localCell_name;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Cell_name
                           */
                           public void setCell_name(java.lang.String param){
                        
                                        this.localCell_name=param;
                                

                           }
                        

                    /**
                    * field for Cell_type
                    */

                    
                                protected java.lang.String localCell_type ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCell_type(){
                           return localCell_type;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Cell_type
                           */
                           public void setCell_type(java.lang.String param){
                        
                                        this.localCell_type=param;
                                

                           }
                        

                    /**
                    * field for Cell_hostname
                    */

                    
                                protected java.lang.String localCell_hostname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCell_hostname(){
                           return localCell_hostname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Cell_hostname
                           */
                           public void setCell_hostname(java.lang.String param){
                        
                                        this.localCell_hostname=param;
                                

                           }
                        

                    /**
                    * field for Port
                    */

                    
                                protected org.apache.axis2.databinding.types.UnsignedInt localPort ;
                            

                       /**
                       * Auto generated getter method
                       * @return org.apache.axis2.databinding.types.UnsignedInt
                       */
                       public  org.apache.axis2.databinding.types.UnsignedInt getPort(){
                           return localPort;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Port
                           */
                           public void setPort(org.apache.axis2.databinding.types.UnsignedInt param){
                        
                                        this.localPort=param;
                                

                           }
                        

                    /**
                    * field for Encryption_key
                    */

                    
                                protected java.lang.String localEncryption_key ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getEncryption_key(){
                           return localEncryption_key;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Encryption_key
                           */
                           public void setEncryption_key(java.lang.String param){
                        
                                        this.localEncryption_key=param;
                                

                           }
                        

                    /**
                    * field for Trusted_servers
                    */

                    
                                protected java.lang.String localTrusted_servers ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getTrusted_servers(){
                           return localTrusted_servers;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Trusted_servers
                           */
                           public void setTrusted_servers(java.lang.String param){
                        
                                        this.localTrusted_servers=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":CellInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "CellInfo",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "cell_name", xmlWriter);
                         

                                      if (localCell_name==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("cell_name cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCell_name);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "cell_type", xmlWriter);
                         

                                      if (localCell_type==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("cell_type cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCell_type);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "cell_hostname", xmlWriter);
                         

                                      if (localCell_hostname==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("cell_hostname cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCell_hostname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "port", xmlWriter);
                         

                                      if (localPort==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("port cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPort));
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "encryption_key", xmlWriter);
                         

                                      if (localEncryption_key==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("encryption_key cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localEncryption_key);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "trusted_servers", xmlWriter);
                         

                                      if (localTrusted_servers==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("trusted_servers cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localTrusted_servers);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "cell_name"));
                             
                                    if (localCell_name != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCell_name));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("cell_name cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "cell_type"));
                             
                                    if (localCell_type != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCell_type));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("cell_type cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "cell_hostname"));
                             
                                    if (localCell_hostname != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCell_hostname));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("cell_hostname cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "port"));
                             
                                    if (localPort != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPort));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("port cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "encryption_key"));
                             
                                    if (localEncryption_key != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEncryption_key));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("encryption_key cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "trusted_servers"));
                             
                                    if (localTrusted_servers != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTrusted_servers));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("trusted_servers cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CellInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CellInfo object =
            new CellInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"CellInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (CellInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cell_name").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCell_name(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cell_type").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCell_type(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cell_hostname").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCell_hostname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","port").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setPort(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","encryption_key").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setEncryption_key(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","trusted_servers").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTrusted_servers(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_ClassDefInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_ClassDefInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Items
                    * This was an Array!
                    */

                    
                                protected ClassDefInfo[] localItems ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localItemsTracker = false ;

                       public boolean isItemsSpecified(){
                           return localItemsTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ClassDefInfo[]
                       */
                       public  ClassDefInfo[] getItems(){
                           return localItems;
                       }

                       
                    


                           
                          /**
                           * validate the array for Items
                           */
                          protected void validateItems(ClassDefInfo[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Items
                          */
                          public void setItems(ClassDefInfo[] param){
                          
                               validateItems(param);

                           localItemsTracker = param != null;
                                  
                                  this.localItems=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param ClassDefInfo
                         */
                         public void addItems(ClassDefInfo param){
                               if (localItems == null){
                               localItems = new ClassDefInfo[]{};
                               }

                        
                             //update the setting tracker
                            localItemsTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
                           list.add(param);
                           this.localItems =
                         (ClassDefInfo[])list.toArray(
                        new ClassDefInfo[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_ClassDefInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_ClassDefInfo",
                       xmlWriter);
               }

           
               }
            if (localItemsTracker){
                                   if (localItems!=null){
                                        for (int i = 0;i < localItems.length;i++){
                                            if (localItems[i] != null){
                                             localItems[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("items cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localItemsTracker){
                         if (localItems!=null) {
                             for (int i = 0;i < localItems.length;i++){

                                if (localItems[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                      "items"));
                                     elementList.add(localItems[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("items cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_ClassDefInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_ClassDefInfo object =
            new ArrayOf_ClassDefInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_ClassDefInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_ClassDefInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(ClassDefInfo.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items").equals(reader.getName())){
                                                                list1.add(ClassDefInfo.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setItems((ClassDefInfo[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            ClassDefInfo.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryData
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryData",
            "");

        

                    /**
                    * field for Query
                    */

                    
                                protected java.lang.String localQuery ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getQuery(){
                           return localQuery;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Query
                           */
                           public void setQuery(java.lang.String param){
                        
                                        this.localQuery=param;
                                

                           }
                        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryData",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryData",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "query", xmlWriter);
                         

                                      if (localQuery==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localQuery);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "query"));
                             
                                     elementList.add(localQuery==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                                 
                                         elementList.add(localImname==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryData object =
            new QueryData();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryData".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryData)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","query").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setQuery(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Password
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "password",
            "");

        

                    /**
                    * field for Password
                    */

                    
                                protected java.lang.String localPassword ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getPassword(){
                           return localPassword;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Password
                           */
                           public void setPassword(java.lang.String param){
                        
                                        this.localPassword=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "password";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":password",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "password",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localPassword==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localPassword);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localPassword==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPassword)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Password parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Password object =
            new Password();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","password").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setPassword(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Query_ev
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "query_ev",
            "");

        

                    /**
                    * field for Query_ev
                    */

                    
                                protected java.lang.String localQuery_ev ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getQuery_ev(){
                           return localQuery_ev;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Query_ev
                           */
                           public void setQuery_ev(java.lang.String param){
                        
                                        this.localQuery_ev=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "query_ev";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":query_ev",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "query_ev",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localQuery_ev==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localQuery_ev);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localQuery_ev==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery_ev)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Query_ev parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Query_ev object =
            new Query_ev();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","query_ev").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setQuery_ev(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Byte
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Byte
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Byte_element
                    * This was an Array!
                    */

                    
                                protected byte[] localByte_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localByte_elementTracker = false ;

                       public boolean isByte_elementSpecified(){
                           return localByte_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return byte[]
                       */
                       public  byte[] getByte_element(){
                           return localByte_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Byte_element
                           */
                          protected void validateByte_element(byte[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Byte_element
                          */
                          public void setByte_element(byte[] param){
                          
                               validateByte_element(param);

                           localByte_elementTracker = param != null;
                                  
                                  this.localByte_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Byte",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Byte",
                       xmlWriter);
               }

           
               }
            if (localByte_elementTracker){
                         if (localByte_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localByte_element.length;i++){
                                    
                                               if (localByte_element[i]!=java.lang.Byte.MIN_VALUE) {
                                           
                                            writeStartElement(null, namespace, "byte_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localByte_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("byte_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localByte_elementTracker){
                        if (localByte_element!=null){
                              for (int i = 0;i < localByte_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "byte_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localByte_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("byte_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Byte parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Byte object =
            new ArrayOf_Byte();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Byte".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Byte)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","byte_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","byte_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setByte_element((byte[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        byte.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class String_Response
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "string_Response",
            "");

        

                    /**
                    * field for String_Response
                    */

                    
                                protected java.lang.String localString_Response ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getString_Response(){
                           return localString_Response;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param String_Response
                           */
                           public void setString_Response(java.lang.String param){
                        
                                        this.localString_Response=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "string_Response";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":string_Response",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "string_Response",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localString_Response==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localString_Response);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localString_Response==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString_Response)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static String_Response parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        String_Response object =
            new String_Response();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","string_Response").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setString_Response(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetCellInfo_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetCellInfo_output",
            "");

        

                    /**
                    * field for CellInfo_Array
                    */

                    
                                protected ArrayOf_CellInfo localCellInfo_Array ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_CellInfo
                       */
                       public  ArrayOf_CellInfo getCellInfo_Array(){
                           return localCellInfo_Array;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CellInfo_Array
                           */
                           public void setCellInfo_Array(ArrayOf_CellInfo param){
                        
                                        this.localCellInfo_Array=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetCellInfo_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetCellInfo_output",
                       xmlWriter);
               }

           
               }
           
                                        if (localCellInfo_Array==null){
                                             throw new org.apache.axis2.databinding.ADBException("CellInfo_Array cannot be null!!");
                                        }
                                       localCellInfo_Array.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","CellInfo_Array"),
                                           xmlWriter);
                                    
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "CellInfo_Array"));
                        
                        
                                if (localCellInfo_Array==null){
                                     throw new org.apache.axis2.databinding.ADBException("CellInfo_Array cannot be null!!");
                                    }
                                    elementList.add(localCellInfo_Array);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetCellInfo_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetCellInfo_output object =
            new GetCellInfo_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetCellInfo_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetCellInfo_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","CellInfo_Array").equals(reader.getName())){
                            
                                            object.setCellInfo_Array(ArrayOf_CellInfo.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryMode
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "QueryMode",
            "");

        

                    /**
                    * field for QueryMode
                    */

                    
                                protected java.lang.String localQueryMode ;
                            
                        private static java.util.HashMap _table_ = new java.util.HashMap();

                        // Constructor
                        
                            protected QueryMode(java.lang.String value, boolean isRegisterValue) {
                                localQueryMode = value;
                                if (isRegisterValue){
                                    
                                           _table_.put(localQueryMode, this);
                                       
                                }

                            }
                        
                                public static final java.lang.String _BMCII_EVENT_CLASSES =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_EVENT_CLASSES");
                            
                                public static final java.lang.String _BMCII_DATA_CLASSES =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BMCII_DATA_CLASSES");
                            
                            public static final QueryMode BMCII_EVENT_CLASSES =
                                new QueryMode(_BMCII_EVENT_CLASSES,true);
                        
                            public static final QueryMode BMCII_DATA_CLASSES =
                                new QueryMode(_BMCII_DATA_CLASSES,true);
                        

                            public java.lang.String getValue() { return localQueryMode;}

                            public boolean equals(java.lang.Object obj) {return (obj == this);}
                            public int hashCode() { return toString().hashCode();}
                            public java.lang.String toString() {
                            
                                    return localQueryMode.toString();
                                

                            }

                    

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = parentQName.getNamespaceURI();
                        java.lang.String _localName = parentQName.getLocalPart();
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":QueryMode",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "QueryMode",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localQueryMode==null){
                                        
                                                 throw new org.apache.axis2.databinding.ADBException("QueryMode cannot be null !!");
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localQueryMode);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQueryMode)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    
            public static QueryMode fromValue(java.lang.String value)
                  throws java.lang.IllegalArgumentException {
                QueryMode enumeration = (QueryMode)
                   
                           _table_.get(value);
                       

                if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }
            public static QueryMode fromString(java.lang.String value,java.lang.String namespaceURI)
                  throws java.lang.IllegalArgumentException {
                try {
                   
                                   return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                               

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static QueryMode fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                java.lang.String content) {
                if (content.indexOf(":") > -1){
                    java.lang.String prefix = content.substring(0,content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return QueryMode.Factory.fromString(content,namespaceUri);
                } else {
                   return QueryMode.Factory.fromString(content,"");
                }
            }
        

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryMode parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryMode object = null;
            // initialize a hash map to keep values
            java.util.Map attributeMap = new java.util.HashMap();
            java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
        

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement()  || reader.hasText()){
            
                                java.lang.String content = reader.getElementText();
                                
                                    if (content.indexOf(":") > 0) {
                                        // this seems to be a Qname so find the namespace and send
                                        prefix = content.substring(0, content.indexOf(":"));
                                        namespaceuri = reader.getNamespaceURI(prefix);
                                        object = QueryMode.Factory.fromString(content,namespaceuri);
                                    } else {
                                        // this seems to be not a qname send and empty namespace incase of it is
                                        // check is done in fromString method
                                        object = QueryMode.Factory.fromString(content,"");
                                    }
                                    
                                    
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RetrieveQueryResults_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "RetrieveQueryResults_output",
            "");

        

                    /**
                    * field for Results
                    */

                    
                                protected TableOf_NameValue localResults ;
                            

                       /**
                       * Auto generated getter method
                       * @return TableOf_NameValue
                       */
                       public  TableOf_NameValue getResults(){
                           return localResults;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Results
                           */
                           public void setResults(TableOf_NameValue param){
                        
                                        this.localResults=param;
                                

                           }
                        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":RetrieveQueryResults_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "RetrieveQueryResults_output",
                       xmlWriter);
               }

           
               }
           
                                        if (localResults==null){
                                             throw new org.apache.axis2.databinding.ADBException("results cannot be null!!");
                                        }
                                       localResults.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","results"),
                                           xmlWriter);
                                    
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "num_of_events", xmlWriter);
                         
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_events cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "results"));
                        
                        
                                if (localResults==null){
                                     throw new org.apache.axis2.databinding.ADBException("results cannot be null!!");
                                }
                                elementList.add(localResults);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "num_of_events"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RetrieveQueryResults_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RetrieveQueryResults_output object =
            new RetrieveQueryResults_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"RetrieveQueryResults_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (RetrieveQueryResults_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","results").equals(reader.getName())){
                            
                                            object.setResults(TableOf_NameValue.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RetrieveQueryResults
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "RetrieveQueryResults",
            "");

        

                    /**
                    * field for RetrieveResultHandle
                    */

                    
                                protected java.lang.String localRetrieveResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getRetrieveResultHandle(){
                           return localRetrieveResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RetrieveResultHandle
                           */
                           public void setRetrieveResultHandle(java.lang.String param){
                        
                                        this.localRetrieveResultHandle=param;
                                

                           }
                        

                    /**
                    * field for StartIndex
                    */

                    
                                protected long localStartIndex ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getStartIndex(){
                           return localStartIndex;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StartIndex
                           */
                           public void setStartIndex(long param){
                        
                                        this.localStartIndex=param;
                                

                           }
                        

                    /**
                    * field for Timeout
                    */

                    
                                protected int localTimeout ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getTimeout(){
                           return localTimeout;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Timeout
                           */
                           public void setTimeout(int param){
                        
                                        this.localTimeout=param;
                                

                           }
                        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":RetrieveQueryResults",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "RetrieveQueryResults",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "retrieveResultHandle", xmlWriter);
                         

                                      if (localRetrieveResultHandle==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localRetrieveResultHandle);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "startIndex", xmlWriter);
                         
                                           if (localStartIndex==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("startIndex cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "timeout", xmlWriter);
                         
                                           if (localTimeout==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("timeout cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "num_of_events", xmlWriter);
                         
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_events cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "retrieveResultHandle"));
                             
                                     elementList.add(localRetrieveResultHandle==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetrieveResultHandle));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "startIndex"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartIndex));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "timeout"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "num_of_events"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RetrieveQueryResults parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RetrieveQueryResults object =
            new RetrieveQueryResults();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"RetrieveQueryResults".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (RetrieveQueryResults)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","retrieveResultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setRetrieveResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","startIndex").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStartIndex(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","timeout").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTimeout(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Event extends ArrayOf_NameValue
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = Event
            Namespace URI = http://blueprint.bmc.com/Event
            Namespace Prefix = 
            */
        

                    /**
                    * field for Subject
                    */

                    
                                protected java.lang.String localSubject ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSubject(){
                           return localSubject;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Subject
                           */
                           public void setSubject(java.lang.String param){
                        
                                        this.localSubject=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/Event");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Event",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Event",
                       xmlWriter);
               }

            if (localNameValue_elementTracker){
                                   if (localNameValue_element!=null){
                                        for (int i = 0;i < localNameValue_element.length;i++){
                                            if (localNameValue_element[i] != null){
                                             localNameValue_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                    
                                }
                             }
                                namespace = "http://blueprint.bmc.com/Event";
                                writeStartElement(null, namespace, "subject", xmlWriter);
                         

                                      if (localSubject==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSubject);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/Event")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2001/XMLSchema-instance","type"));
                attribList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","Event"));
             if (localNameValue_elementTracker){
                         if (localNameValue_element!=null) {
                             for (int i = 0;i < localNameValue_element.length;i++){

                                if (localNameValue_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                      "NameValue_element"));
                                     elementList.add(localNameValue_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!!");
                                
                         }

                    }
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/Event",
                                                                  "subject"));
                             
                                    if (localSubject != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubject));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Event parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Event object =
            new Event();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Event".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Event)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(NameValue.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                                                                list1.add(NameValue.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setNameValue_element((NameValue[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            NameValue.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","subject").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSubject(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Disconnect
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "Disconnect",
            "");

        

                    /**
                    * field for Connection
                    */

                    
                                protected long localConnection ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getConnection(){
                           return localConnection;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Connection
                           */
                           public void setConnection(long param){
                        
                                        this.localConnection=param;
                                

                           }
                        

                    /**
                    * field for DeleteBuffer
                    */

                    
                                protected boolean localDeleteBuffer ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getDeleteBuffer(){
                           return localDeleteBuffer;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param DeleteBuffer
                           */
                           public void setDeleteBuffer(boolean param){
                        
                                        this.localDeleteBuffer=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Disconnect",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Disconnect",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "connection", xmlWriter);
                         
                                           if (localConnection==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("connection cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "deleteBuffer", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("deleteBuffer cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteBuffer));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "connection"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "deleteBuffer"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeleteBuffer));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Disconnect parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Disconnect object =
            new Disconnect();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Disconnect".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Disconnect)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","connection").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setConnection(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","deleteBuffer").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setDeleteBuffer(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Message
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "message",
            "");

        

                    /**
                    * field for Message
                    */

                    
                                protected Event localMessage ;
                            

                       /**
                       * Auto generated getter method
                       * @return Event
                       */
                       public  Event getMessage(){
                           return localMessage;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Message
                           */
                           public void setMessage(Event param){
                        
                                        this.localMessage=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                                  if (localMessage==null){
                                    java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                                    writeStartElement(null, namespace, "message", xmlWriter);

                                    // write the nil attribute
                                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                    xmlWriter.writeEndElement();
                                   }else{
                                     localMessage.serialize(MY_QNAME,xmlWriter);
                                   }
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localMessage==null){
                                   return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return localMessage.getPullParser(MY_QNAME);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Message parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Message object =
            new Message();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","message").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setMessage(null);
                                      reader.next();
                                      
                                  }else{
                                
                                            object.setMessage(Event.Factory.parse(reader));
                                        }
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StringArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "StringArray",
            "");

        

                    /**
                    * field for StringArray
                    */

                    
                                protected ArrayOf_String localStringArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_String
                       */
                       public  ArrayOf_String getStringArray(){
                           return localStringArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StringArray
                           */
                           public void setStringArray(ArrayOf_String param){
                        
                                        this.localStringArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localStringArray==null){
                               throw new org.apache.axis2.databinding.ADBException("StringArray cannot be null!");
                             }
                             localStringArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localStringArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StringArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StringArray object =
            new StringArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","StringArray").equals(reader.getName())){
                            
                                            object.setStringArray(ArrayOf_String.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class AckEvents
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "AckEvents",
            "");

        

                    /**
                    * field for FilterName
                    */

                    
                                protected java.lang.String localFilterName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getFilterName(){
                           return localFilterName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FilterName
                           */
                           public void setFilterName(java.lang.String param){
                        
                                        this.localFilterName=param;
                                

                           }
                        

                    /**
                    * field for Context_nio
                    */

                    
                                protected java.lang.String localContext_nio ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext_nio(){
                           return localContext_nio;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context_nio
                           */
                           public void setContext_nio(java.lang.String param){
                        
                                        this.localContext_nio=param;
                                

                           }
                        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":AckEvents",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "AckEvents",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "filterName", xmlWriter);
                         

                                      if (localFilterName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localFilterName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "context_nio", xmlWriter);
                         

                                      if (localContext_nio==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localContext_nio);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "num_of_events", xmlWriter);
                         
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_events cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "filterName"));
                             
                                     elementList.add(localFilterName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "context_nio"));
                             
                                     elementList.add(localContext_nio==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext_nio));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "num_of_events"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static AckEvents parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        AckEvents object =
            new AckEvents();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"AckEvents".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (AckEvents)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","filterName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFilterName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","context_nio").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext_nio(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ResultCode
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "resultCode",
            "");

        

                    /**
                    * field for ResultCode
                    */

                    
                                protected int localResultCode ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getResultCode(){
                           return localResultCode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultCode
                           */
                           public void setResultCode(int param){
                        
                                        this.localResultCode=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "resultCode";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":resultCode",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "resultCode",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localResultCode==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ResultCode parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ResultCode object =
            new ResultCode();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","resultCode").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultCode(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Context
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "context",
            "");

        

                    /**
                    * field for Context
                    */

                    
                                protected java.lang.String localContext ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext(){
                           return localContext;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context
                           */
                           public void setContext(java.lang.String param){
                        
                                        this.localContext=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "context";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":context",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "context",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localContext==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localContext);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localContext==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Context parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Context object =
            new Context();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","context").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryClassDefinitions
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryClassDefinitions",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for QueryMode
                    */

                    
                                protected QueryMode localQueryMode ;
                            

                       /**
                       * Auto generated getter method
                       * @return QueryMode
                       */
                       public  QueryMode getQueryMode(){
                           return localQueryMode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param QueryMode
                           */
                           public void setQueryMode(QueryMode param){
                        
                                        this.localQueryMode=param;
                                

                           }
                        

                    /**
                    * field for BaseClass
                    */

                    
                                protected java.lang.String localBaseClass ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getBaseClass(){
                           return localBaseClass;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BaseClass
                           */
                           public void setBaseClass(java.lang.String param){
                        
                                        this.localBaseClass=param;
                                

                           }
                        

                    /**
                    * field for ClassName
                    */

                    
                                protected java.lang.String localClassName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getClassName(){
                           return localClassName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassName
                           */
                           public void setClassName(java.lang.String param){
                        
                                        this.localClassName=param;
                                

                           }
                        

                    /**
                    * field for ClassOnly
                    */

                    
                                protected boolean localClassOnly ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getClassOnly(){
                           return localClassOnly;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassOnly
                           */
                           public void setClassOnly(boolean param){
                        
                                        this.localClassOnly=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryClassDefinitions",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryClassDefinitions",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                        if (localQueryMode==null){
                                             throw new org.apache.axis2.databinding.ADBException("queryMode cannot be null!!");
                                        }
                                       localQueryMode.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","queryMode"),
                                           xmlWriter);
                                    
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "baseClass", xmlWriter);
                         

                                      if (localBaseClass==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localBaseClass);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "className", xmlWriter);
                         

                                      if (localClassName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localClassName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "classOnly", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("classOnly cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassOnly));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "queryMode"));
                        
                        
                                if (localQueryMode==null){
                                     throw new org.apache.axis2.databinding.ADBException("queryMode cannot be null!!");
                                }
                                elementList.add(localQueryMode);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "baseClass"));
                             
                                     elementList.add(localBaseClass==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBaseClass));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "className"));
                             
                                     elementList.add(localClassName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "classOnly"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassOnly));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryClassDefinitions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryClassDefinitions object =
            new QueryClassDefinitions();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryClassDefinitions".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryClassDefinitions)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","queryMode").equals(reader.getName())){
                            
                                            object.setQueryMode(QueryMode.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","baseClass").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBaseClass(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","className").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","classOnly").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassOnly(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SlotDefInfo_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "SlotDefInfo_element",
            "");

        

                    /**
                    * field for SlotDefInfo_element
                    */

                    
                                protected SlotDefInfo localSlotDefInfo_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return SlotDefInfo
                       */
                       public  SlotDefInfo getSlotDefInfo_element(){
                           return localSlotDefInfo_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotDefInfo_element
                           */
                           public void setSlotDefInfo_element(SlotDefInfo param){
                        
                                        this.localSlotDefInfo_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localSlotDefInfo_element==null){
                               throw new org.apache.axis2.databinding.ADBException("SlotDefInfo_element cannot be null!");
                             }
                             localSlotDefInfo_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localSlotDefInfo_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SlotDefInfo_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SlotDefInfo_element object =
            new SlotDefInfo_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SlotDefInfo_element").equals(reader.getName())){
                            
                                            object.setSlotDefInfo_element(SlotDefInfo.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CStatus
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = CStatus
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for CmpStatus
                    */

                    
                                protected java.lang.String localCmpStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCmpStatus(){
                           return localCmpStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CmpStatus
                           */
                           public void setCmpStatus(java.lang.String param){
                        
                                        this.localCmpStatus=param;
                                

                           }
                        

                    /**
                    * field for ImpStatus
                    */

                    
                                protected java.lang.String localImpStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImpStatus(){
                           return localImpStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ImpStatus
                           */
                           public void setImpStatus(java.lang.String param){
                        
                                        this.localImpStatus=param;
                                

                           }
                        

                    /**
                    * field for ManStatus
                    */

                    
                                protected java.lang.String localManStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getManStatus(){
                           return localManStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ManStatus
                           */
                           public void setManStatus(java.lang.String param){
                        
                                        this.localManStatus=param;
                                

                           }
                        

                    /**
                    * field for SubStatus
                    */

                    
                                protected java.lang.String localSubStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSubStatus(){
                           return localSubStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SubStatus
                           */
                           public void setSubStatus(java.lang.String param){
                        
                                        this.localSubStatus=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":CStatus",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "CStatus",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "cmpStatus", xmlWriter);
                         

                                      if (localCmpStatus==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("cmpStatus cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localCmpStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "impStatus", xmlWriter);
                         

                                      if (localImpStatus==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("impStatus cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImpStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "manStatus", xmlWriter);
                         

                                      if (localManStatus==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("manStatus cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localManStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "subStatus", xmlWriter);
                         

                                      if (localSubStatus==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("subStatus cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSubStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "cmpStatus"));
                             
                                    if (localCmpStatus != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCmpStatus));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("cmpStatus cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "impStatus"));
                             
                                    if (localImpStatus != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImpStatus));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("impStatus cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "manStatus"));
                             
                                    if (localManStatus != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localManStatus));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("manStatus cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "subStatus"));
                             
                                    if (localSubStatus != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubStatus));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("subStatus cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CStatus object =
            new CStatus();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"CStatus".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (CStatus)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cmpStatus").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCmpStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","impStatus").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImpStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","manStatus").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setManStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","subStatus").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSubStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SendEvent_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SendEvent_output",
            "");

        

                    /**
                    * field for Response
                    */

                    
                                protected java.lang.String localResponse ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getResponse(){
                           return localResponse;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Response
                           */
                           public void setResponse(java.lang.String param){
                        
                                        this.localResponse=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SendEvent_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SendEvent_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "response", xmlWriter);
                         

                                      if (localResponse==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localResponse);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "response"));
                                 
                                         elementList.add(localResponse==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResponse));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SendEvent_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SendEvent_output object =
            new SendEvent_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SendEvent_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SendEvent_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","response").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResponse(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SetManualStatus_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SetManualStatus_output",
            "");

        

                    /**
                    * field for ErrorCode
                    */

                    
                                protected int localErrorCode ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getErrorCode(){
                           return localErrorCode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ErrorCode
                           */
                           public void setErrorCode(int param){
                        
                                        this.localErrorCode=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SetManualStatus_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SetManualStatus_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "errorCode", xmlWriter);
                         
                                           if (localErrorCode==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "errorCode"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SetManualStatus_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SetManualStatus_output object =
            new SetManualStatus_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SetManualStatus_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SetManualStatus_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","errorCode").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setErrorCode(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setErrorCode(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetEventsResponse_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "GetEventsResponse_element",
            "");

        

                    /**
                    * field for GetEventsResponse_element
                    */

                    
                                protected GetEventsResponse localGetEventsResponse_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return GetEventsResponse
                       */
                       public  GetEventsResponse getGetEventsResponse_element(){
                           return localGetEventsResponse_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param GetEventsResponse_element
                           */
                           public void setGetEventsResponse_element(GetEventsResponse param){
                        
                                        this.localGetEventsResponse_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                                  if (localGetEventsResponse_element==null){
                                    java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                                    writeStartElement(null, namespace, "GetEventsResponse_element", xmlWriter);

                                    // write the nil attribute
                                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                    xmlWriter.writeEndElement();
                                   }else{
                                     localGetEventsResponse_element.serialize(MY_QNAME,xmlWriter);
                                   }
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localGetEventsResponse_element==null){
                                   return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return localGetEventsResponse_element.getPullParser(MY_QNAME);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetEventsResponse_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetEventsResponse_element object =
            new GetEventsResponse_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","GetEventsResponse_element").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setGetEventsResponse_element(null);
                                      reader.next();
                                      
                                  }else{
                                
                                            object.setGetEventsResponse_element(GetEventsResponse.Factory.parse(reader));
                                        }
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ResultHandle
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "resultHandle",
            "");

        

                    /**
                    * field for ResultHandle
                    */

                    
                                protected java.lang.String localResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getResultHandle(){
                           return localResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultHandle
                           */
                           public void setResultHandle(java.lang.String param){
                        
                                        this.localResultHandle=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "resultHandle";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":resultHandle",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "resultHandle",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localResultHandle==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localResultHandle);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localResultHandle==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultHandle)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ResultHandle parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ResultHandle object =
            new ResultHandle();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","resultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StatusSet
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "statusSet",
            "");

        

                    /**
                    * field for StatusSet
                    */

                    
                                protected int localStatusSet ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getStatusSet(){
                           return localStatusSet;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StatusSet
                           */
                           public void setStatusSet(int param){
                        
                                        this.localStatusSet=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "statusSet";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":statusSet",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "statusSet",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localStatusSet==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatusSet));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatusSet)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StatusSet parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StatusSet object =
            new StatusSet();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                                       object.setStatusSet(java.lang.Integer.MIN_VALUE);
                                   
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","statusSet").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStatusSet(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setStatusSet(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Num_of_events
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "num_of_events",
            "");

        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "num_of_events";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":num_of_events",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "num_of_events",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Num_of_events parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Num_of_events object =
            new Num_of_events();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ExtensionMapper{

      public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                   java.lang.String typeName,
                                                   javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "StateChangeType".equals(typeName)){
               
                        return  StateChangeType.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/Event".equals(namespaceURI) &&
              "ArrayOf_Event".equals(typeName)){
               
                        return  ArrayOf_Event.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_NameValue".equals(typeName)){
               
                        return  ArrayOf_NameValue.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_String".equals(typeName)){
               
                        return  ArrayOf_String.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "ClassDefInfo".equals(typeName)){
               
                        return  ClassDefInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "CStatus".equals(typeName)){
               
                        return  CStatus.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "IMMessageType".equals(typeName)){
               
                        return  IMMessageType.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "TableOf_NameValue".equals(typeName)){
               
                        return  TableOf_NameValue.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "CellInfo".equals(typeName)){
               
                        return  CellInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "ArrayOf_ClassDefInfo".equals(typeName)){
               
                        return  ArrayOf_ClassDefInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Double".equals(typeName)){
               
                        return  ArrayOf_Double.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Float".equals(typeName)){
               
                        return  ArrayOf_Float.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "IMBufferType".equals(typeName)){
               
                        return  IMBufferType.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Short".equals(typeName)){
               
                        return  ArrayOf_Short.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "RetrieveQueryResultResponse".equals(typeName)){
               
                        return  RetrieveQueryResultResponse.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Long".equals(typeName)){
               
                        return  ArrayOf_Long.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Byte".equals(typeName)){
               
                        return  ArrayOf_Byte.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "SlotDefInfo".equals(typeName)){
               
                        return  SlotDefInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "ArrayOf_CellInfo".equals(typeName)){
               
                        return  ArrayOf_CellInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "NameValue".equals(typeName)){
               
                        return  NameValue.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "QueryMode".equals(typeName)){
               
                        return  QueryMode.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "value".equals(typeName)){
               
                        return  Value.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "SMComponent".equals(typeName)){
               
                        return  SMComponent.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/Event".equals(namespaceURI) &&
              "Event".equals(typeName)){
               
                        return  Event.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "ArrayOf_Int".equals(typeName)){
               
                        return  ArrayOf_Int.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "ArrayOf_SlotDefInfo".equals(typeName)){
               
                        return  ArrayOf_SlotDefInfo.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "ArrayOf_SMComponent".equals(typeName)){
               
                        return  ArrayOf_SMComponent.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/BasicTypes".equals(namespaceURI) &&
              "DataType".equals(typeName)){
               
                        return  DataType.Factory.parse(reader);
                    

              }

          
              if (
              "http://blueprint.bmc.com/ImapiTypes".equals(namespaceURI) &&
              "GetEventsResponse".equals(typeName)){
               
                        return  GetEventsResponse.Factory.parse(reader);
                    

              }

          
         throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
      }

    }

    public static class ArrayOf_Double
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Double
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Double_element
                    * This was an Array!
                    */

                    
                                protected double[] localDouble_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localDouble_elementTracker = false ;

                       public boolean isDouble_elementSpecified(){
                           return localDouble_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return double[]
                       */
                       public  double[] getDouble_element(){
                           return localDouble_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Double_element
                           */
                          protected void validateDouble_element(double[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Double_element
                          */
                          public void setDouble_element(double[] param){
                          
                               validateDouble_element(param);

                           localDouble_elementTracker = param != null;
                                  
                                  this.localDouble_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Double",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Double",
                       xmlWriter);
               }

           
               }
            if (localDouble_elementTracker){
                         if (localDouble_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localDouble_element.length;i++){
                                    
                                               if (!java.lang.Double.isNaN(localDouble_element[i])) {
                                           
                                            writeStartElement(null, namespace, "double_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDouble_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("double_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localDouble_elementTracker){
                        if (localDouble_element!=null){
                              for (int i = 0;i < localDouble_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "double_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDouble_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("double_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Double parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Double object =
            new ArrayOf_Double();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Double".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Double)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","double_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","double_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setDouble_element((double[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        double.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Value_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "value_element",
            "");

        

                    /**
                    * field for Value_element
                    */

                    
                                protected Value localValue_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return Value
                       */
                       public  Value getValue_element(){
                           return localValue_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Value_element
                           */
                           public void setValue_element(Value param){
                        
                                        this.localValue_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localValue_element==null){
                               throw new org.apache.axis2.databinding.ADBException("value_element cannot be null!");
                             }
                             localValue_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localValue_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Value_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Value_element object =
            new Value_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","value_element").equals(reader.getName())){
                            
                                            object.setValue_element(Value.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class LongArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "LongArray",
            "");

        

                    /**
                    * field for LongArray
                    */

                    
                                protected ArrayOf_Long localLongArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Long
                       */
                       public  ArrayOf_Long getLongArray(){
                           return localLongArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param LongArray
                           */
                           public void setLongArray(ArrayOf_Long param){
                        
                                        this.localLongArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localLongArray==null){
                               throw new org.apache.axis2.databinding.ADBException("LongArray cannot be null!");
                             }
                             localLongArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localLongArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static LongArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        LongArray object =
            new LongArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","LongArray").equals(reader.getName())){
                            
                                            object.setLongArray(ArrayOf_Long.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RetrieveQueryResultResponse_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "RetrieveQueryResultResponse_element",
            "");

        

                    /**
                    * field for RetrieveQueryResultResponse_element
                    */

                    
                                protected RetrieveQueryResultResponse localRetrieveQueryResultResponse_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return RetrieveQueryResultResponse
                       */
                       public  RetrieveQueryResultResponse getRetrieveQueryResultResponse_element(){
                           return localRetrieveQueryResultResponse_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RetrieveQueryResultResponse_element
                           */
                           public void setRetrieveQueryResultResponse_element(RetrieveQueryResultResponse param){
                        
                                        this.localRetrieveQueryResultResponse_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                                  if (localRetrieveQueryResultResponse_element==null){
                                    java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                                    writeStartElement(null, namespace, "RetrieveQueryResultResponse_element", xmlWriter);

                                    // write the nil attribute
                                    writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                    xmlWriter.writeEndElement();
                                   }else{
                                     localRetrieveQueryResultResponse_element.serialize(MY_QNAME,xmlWriter);
                                   }
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localRetrieveQueryResultResponse_element==null){
                                   return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return localRetrieveQueryResultResponse_element.getPullParser(MY_QNAME);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RetrieveQueryResultResponse_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RetrieveQueryResultResponse_element object =
            new RetrieveQueryResultResponse_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","RetrieveQueryResultResponse_element").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setRetrieveQueryResultResponse_element(null);
                                      reader.next();
                                      
                                  }else{
                                
                                            object.setRetrieveQueryResultResponse_element(RetrieveQueryResultResponse.Factory.parse(reader));
                                        }
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Float
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Float
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Float_element
                    * This was an Array!
                    */

                    
                                protected float[] localFloat_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localFloat_elementTracker = false ;

                       public boolean isFloat_elementSpecified(){
                           return localFloat_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return float[]
                       */
                       public  float[] getFloat_element(){
                           return localFloat_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Float_element
                           */
                          protected void validateFloat_element(float[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Float_element
                          */
                          public void setFloat_element(float[] param){
                          
                               validateFloat_element(param);

                           localFloat_elementTracker = param != null;
                                  
                                  this.localFloat_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Float",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Float",
                       xmlWriter);
               }

           
               }
            if (localFloat_elementTracker){
                         if (localFloat_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localFloat_element.length;i++){
                                    
                                               if (!java.lang.Float.isNaN(localFloat_element[i])) {
                                           
                                            writeStartElement(null, namespace, "float_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFloat_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("float_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localFloat_elementTracker){
                        if (localFloat_element!=null){
                              for (int i = 0;i < localFloat_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "float_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFloat_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("float_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Float parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Float object =
            new ArrayOf_Float();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Float".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Float)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","float_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","float_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setFloat_element((float[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        float.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ComponentStatusId
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "componentStatusId",
            "");

        

                    /**
                    * field for ComponentStatusId
                    */

                    
                                protected java.lang.String localComponentStatusId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentStatusId(){
                           return localComponentStatusId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentStatusId
                           */
                           public void setComponentStatusId(java.lang.String param){
                        
                                        this.localComponentStatusId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "componentStatusId";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":componentStatusId",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "componentStatusId",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localComponentStatusId==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localComponentStatusId);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localComponentStatusId==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentStatusId)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ComponentStatusId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ComponentStatusId object =
            new ComponentStatusId();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","componentStatusId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentStatusId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Event_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/Event",
            "Event_element",
            "");

        

                    /**
                    * field for Event_element
                    */

                    
                                protected Event localEvent_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return Event
                       */
                       public  Event getEvent_element(){
                           return localEvent_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Event_element
                           */
                           public void setEvent_element(Event param){
                        
                                        this.localEvent_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localEvent_element==null){
                               throw new org.apache.axis2.databinding.ADBException("Event_element cannot be null!");
                             }
                             localEvent_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/Event")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localEvent_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Event_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Event_element object =
            new Event_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","Event_element").equals(reader.getName())){
                            
                                            object.setEvent_element(Event.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Timeout
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "timeout",
            "");

        

                    /**
                    * field for Timeout
                    */

                    
                                protected int localTimeout ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getTimeout(){
                           return localTimeout;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Timeout
                           */
                           public void setTimeout(int param){
                        
                                        this.localTimeout=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "timeout";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":timeout",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "timeout",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localTimeout==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Timeout parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Timeout object =
            new Timeout();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","timeout").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTimeout(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryComponentStatus
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryComponentStatus",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryComponentStatus",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryComponentStatus",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                                 
                                         elementList.add(localComponentId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryComponentStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryComponentStatus object =
            new QueryComponentStatus();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryComponentStatus".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryComponentStatus)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Unsubscribe
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "Unsubscribe",
            "");

        

                    /**
                    * field for FilterName
                    */

                    
                                protected java.lang.String localFilterName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getFilterName(){
                           return localFilterName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FilterName
                           */
                           public void setFilterName(java.lang.String param){
                        
                                        this.localFilterName=param;
                                

                           }
                        

                    /**
                    * field for Context
                    */

                    
                                protected java.lang.String localContext ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext(){
                           return localContext;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context
                           */
                           public void setContext(java.lang.String param){
                        
                                        this.localContext=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Unsubscribe",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Unsubscribe",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "filterName", xmlWriter);
                         

                                      if (localFilterName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localFilterName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "context", xmlWriter);
                         

                                      if (localContext==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localContext);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "filterName"));
                             
                                     elementList.add(localFilterName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "context"));
                                 
                                         elementList.add(localContext==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Unsubscribe parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Unsubscribe object =
            new Unsubscribe();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Unsubscribe".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Unsubscribe)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","filterName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFilterName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","context").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CallbackURL
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "callbackURL",
            "");

        

                    /**
                    * field for CallbackURL
                    */

                    
                                protected java.lang.String localCallbackURL ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCallbackURL(){
                           return localCallbackURL;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CallbackURL
                           */
                           public void setCallbackURL(java.lang.String param){
                        
                                        this.localCallbackURL=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "callbackURL";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":callbackURL",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "callbackURL",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localCallbackURL==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localCallbackURL);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localCallbackURL==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCallbackURL)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CallbackURL parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CallbackURL object =
            new CallbackURL();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","callbackURL").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCallbackURL(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ComponentId
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "componentId",
            "");

        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "componentId";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":componentId",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "componentId",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localComponentId==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localComponentId);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localComponentId==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ComponentId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ComponentId object =
            new ComponentId();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Long
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Long
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Long_element
                    * This was an Array!
                    */

                    
                                protected long[] localLong_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localLong_elementTracker = false ;

                       public boolean isLong_elementSpecified(){
                           return localLong_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return long[]
                       */
                       public  long[] getLong_element(){
                           return localLong_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Long_element
                           */
                          protected void validateLong_element(long[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Long_element
                          */
                          public void setLong_element(long[] param){
                          
                               validateLong_element(param);

                           localLong_elementTracker = param != null;
                                  
                                  this.localLong_element=param;
                          }

                           
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Long",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Long",
                       xmlWriter);
               }

           
               }
            if (localLong_elementTracker){
                         if (localLong_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localLong_element.length;i++){
                                    
                                               if (localLong_element[i]!=java.lang.Long.MIN_VALUE) {
                                           
                                            writeStartElement(null, namespace, "long_element", xmlWriter);

                                        
                                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_element[i]));
                                            xmlWriter.writeEndElement();
                                        
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("long_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localLong_elementTracker){
                        if (localLong_element!=null){
                              for (int i = 0;i < localLong_element.length;i++){
                                  
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                                                                   "long_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_element[i]));

                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("long_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Long parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Long object =
            new ArrayOf_Long();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Long".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Long)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","long_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","long_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                        object.setLong_element((long[])
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        long.class,list1));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ModeToSet
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "modeToSet",
            "");

        

                    /**
                    * field for ModeToSet
                    */

                    
                                protected java.lang.String localModeToSet ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getModeToSet(){
                           return localModeToSet;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ModeToSet
                           */
                           public void setModeToSet(java.lang.String param){
                        
                                        this.localModeToSet=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "modeToSet";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":modeToSet",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "modeToSet",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localModeToSet==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localModeToSet);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localModeToSet==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModeToSet)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ModeToSet parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ModeToSet object =
            new ModeToSet();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","modeToSet").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setModeToSet(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SlotDefInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = SlotDefInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Slot_name
                    */

                    
                                protected java.lang.String localSlot_name ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlot_name(){
                           return localSlot_name;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slot_name
                           */
                           public void setSlot_name(java.lang.String param){
                        
                                        this.localSlot_name=param;
                                

                           }
                        

                    /**
                    * field for Slot_type
                    */

                    
                                protected java.lang.String localSlot_type ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlot_type(){
                           return localSlot_type;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slot_type
                           */
                           public void setSlot_type(java.lang.String param){
                        
                                        this.localSlot_type=param;
                                

                           }
                        

                    /**
                    * field for Slot_rep_type
                    */

                    
                                protected java.lang.String localSlot_rep_type ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlot_rep_type(){
                           return localSlot_rep_type;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slot_rep_type
                           */
                           public void setSlot_rep_type(java.lang.String param){
                        
                                        this.localSlot_rep_type=param;
                                

                           }
                        

                    /**
                    * field for Slot_flags
                    */

                    
                                protected java.lang.String localSlot_flags ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlot_flags(){
                           return localSlot_flags;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slot_flags
                           */
                           public void setSlot_flags(java.lang.String param){
                        
                                        this.localSlot_flags=param;
                                

                           }
                        

                    /**
                    * field for Slot_def_val
                    */

                    
                                protected java.lang.String localSlot_def_val ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlot_def_val(){
                           return localSlot_def_val;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slot_def_val
                           */
                           public void setSlot_def_val(java.lang.String param){
                        
                                        this.localSlot_def_val=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SlotDefInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SlotDefInfo",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slot_name", xmlWriter);
                         

                                      if (localSlot_name==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("slot_name cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlot_name);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slot_type", xmlWriter);
                         

                                      if (localSlot_type==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("slot_type cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlot_type);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slot_rep_type", xmlWriter);
                         

                                      if (localSlot_rep_type==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("slot_rep_type cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlot_rep_type);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slot_flags", xmlWriter);
                         

                                      if (localSlot_flags==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("slot_flags cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlot_flags);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slot_def_val", xmlWriter);
                         

                                      if (localSlot_def_val==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("slot_def_val cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlot_def_val);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slot_name"));
                             
                                    if (localSlot_name != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlot_name));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("slot_name cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slot_type"));
                             
                                    if (localSlot_type != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlot_type));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("slot_type cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slot_rep_type"));
                             
                                    if (localSlot_rep_type != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlot_rep_type));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("slot_rep_type cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slot_flags"));
                             
                                    if (localSlot_flags != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlot_flags));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("slot_flags cannot be null!!");
                                    }
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slot_def_val"));
                             
                                    if (localSlot_def_val != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlot_def_val));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("slot_def_val cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SlotDefInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SlotDefInfo object =
            new SlotDefInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SlotDefInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SlotDefInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slot_name").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlot_name(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slot_type").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlot_type(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slot_rep_type").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlot_rep_type(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slot_flags").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlot_flags(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slot_def_val").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlot_def_val(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_CellInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_CellInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for CellInfo_element
                    * This was an Array!
                    */

                    
                                protected CellInfo[] localCellInfo_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localCellInfo_elementTracker = false ;

                       public boolean isCellInfo_elementSpecified(){
                           return localCellInfo_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return CellInfo[]
                       */
                       public  CellInfo[] getCellInfo_element(){
                           return localCellInfo_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for CellInfo_element
                           */
                          protected void validateCellInfo_element(CellInfo[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param CellInfo_element
                          */
                          public void setCellInfo_element(CellInfo[] param){
                          
                               validateCellInfo_element(param);

                           localCellInfo_elementTracker = param != null;
                                  
                                  this.localCellInfo_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param CellInfo
                         */
                         public void addCellInfo_element(CellInfo param){
                               if (localCellInfo_element == null){
                               localCellInfo_element = new CellInfo[]{};
                               }

                        
                             //update the setting tracker
                            localCellInfo_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localCellInfo_element);
                           list.add(param);
                           this.localCellInfo_element =
                         (CellInfo[])list.toArray(
                        new CellInfo[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_CellInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_CellInfo",
                       xmlWriter);
               }

           
               }
            if (localCellInfo_elementTracker){
                                   if (localCellInfo_element!=null){
                                        for (int i = 0;i < localCellInfo_element.length;i++){
                                            if (localCellInfo_element[i] != null){
                                             localCellInfo_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","CellInfo_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("CellInfo_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localCellInfo_elementTracker){
                         if (localCellInfo_element!=null) {
                             for (int i = 0;i < localCellInfo_element.length;i++){

                                if (localCellInfo_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                      "CellInfo_element"));
                                     elementList.add(localCellInfo_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("CellInfo_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_CellInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_CellInfo object =
            new ArrayOf_CellInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_CellInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_CellInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","CellInfo_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(CellInfo.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","CellInfo_element").equals(reader.getName())){
                                                                list1.add(CellInfo.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setCellInfo_element((CellInfo[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            CellInfo.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class UnregisterStateChange_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "UnregisterStateChange_output",
            "");

        

                    /**
                    * field for ResultCode
                    */

                    
                                protected int localResultCode ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getResultCode(){
                           return localResultCode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultCode
                           */
                           public void setResultCode(int param){
                        
                                        this.localResultCode=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":UnregisterStateChange_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "UnregisterStateChange_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultCode", xmlWriter);
                         
                                           if (localResultCode==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("resultCode cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultCode"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCode));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static UnregisterStateChange_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        UnregisterStateChange_output object =
            new UnregisterStateChange_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"UnregisterStateChange_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (UnregisterStateChange_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultCode").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultCode(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class NameValueArray_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "NameValueArray_element",
            "");

        

                    /**
                    * field for NameValueArray_element
                    */

                    
                                protected ArrayOf_NameValue localNameValueArray_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_NameValue
                       */
                       public  ArrayOf_NameValue getNameValueArray_element(){
                           return localNameValueArray_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param NameValueArray_element
                           */
                           public void setNameValueArray_element(ArrayOf_NameValue param){
                        
                                        this.localNameValueArray_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localNameValueArray_element==null){
                               throw new org.apache.axis2.databinding.ADBException("NameValueArray_element cannot be null!");
                             }
                             localNameValueArray_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localNameValueArray_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static NameValueArray_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        NameValueArray_element object =
            new NameValueArray_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValueArray_element").equals(reader.getName())){
                            
                                            object.setNameValueArray_element(ArrayOf_NameValue.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ByteArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "ByteArray",
            "");

        

                    /**
                    * field for ByteArray
                    */

                    
                                protected ArrayOf_Byte localByteArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Byte
                       */
                       public  ArrayOf_Byte getByteArray(){
                           return localByteArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ByteArray
                           */
                           public void setByteArray(ArrayOf_Byte param){
                        
                                        this.localByteArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localByteArray==null){
                               throw new org.apache.axis2.databinding.ADBException("ByteArray cannot be null!");
                             }
                             localByteArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localByteArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ByteArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ByteArray object =
            new ByteArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","ByteArray").equals(reader.getName())){
                            
                                            object.setByteArray(ArrayOf_Byte.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SetManualStatus
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SetManualStatus",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

                    /**
                    * field for StatusSet
                    */

                    
                                protected int localStatusSet ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getStatusSet(){
                           return localStatusSet;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StatusSet
                           */
                           public void setStatusSet(int param){
                        
                                        this.localStatusSet=param;
                                

                           }
                        

                    /**
                    * field for ComponentStatus
                    */

                    
                                protected java.lang.String localComponentStatus ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentStatus(){
                           return localComponentStatus;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentStatus
                           */
                           public void setComponentStatus(java.lang.String param){
                        
                                        this.localComponentStatus=param;
                                

                           }
                        

                    /**
                    * field for Comment
                    */

                    
                                protected java.lang.String localComment ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComment(){
                           return localComment;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Comment
                           */
                           public void setComment(java.lang.String param){
                        
                                        this.localComment=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SetManualStatus",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SetManualStatus",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "statusSet", xmlWriter);
                         
                                           if (localStatusSet==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatusSet));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentStatus", xmlWriter);
                         

                                      if (localComponentStatus==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentStatus);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "comment", xmlWriter);
                         

                                      if (localComment==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComment);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                             
                                     elementList.add(localComponentId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "statusSet"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStatusSet));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentStatus"));
                             
                                     elementList.add(localComponentStatus==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentStatus));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "comment"));
                                 
                                         elementList.add(localComment==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComment));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SetManualStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SetManualStatus object =
            new SetManualStatus();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SetManualStatus".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SetManualStatus)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","statusSet").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStatusSet(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setStatusSet(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentStatus").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentStatus(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","comment").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComment(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Long_Response
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "long_Response",
            "");

        

                    /**
                    * field for Long_Response
                    */

                    
                                protected long localLong_Response ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getLong_Response(){
                           return localLong_Response;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Long_Response
                           */
                           public void setLong_Response(long param){
                        
                                        this.localLong_Response=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "long_Response";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":long_Response",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "long_Response",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localLong_Response==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_Response));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLong_Response)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Long_Response parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Long_Response object =
            new Long_Response();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","long_Response").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setLong_Response(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class MessageID
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "messageID",
            "");

        

                    /**
                    * field for MessageID
                    */

                    
                                protected java.lang.String localMessageID ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getMessageID(){
                           return localMessageID;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param MessageID
                           */
                           public void setMessageID(java.lang.String param){
                        
                                        this.localMessageID=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "messageID";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":messageID",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "messageID",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localMessageID==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localMessageID);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localMessageID==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageID)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static MessageID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        MessageID object =
            new MessageID();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","messageID").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setMessageID(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class EndQuery
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "EndQuery",
            "");

        

                    /**
                    * field for ResultHandle
                    */

                    
                                protected java.lang.String localResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getResultHandle(){
                           return localResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultHandle
                           */
                           public void setResultHandle(java.lang.String param){
                        
                                        this.localResultHandle=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":EndQuery",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "EndQuery",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultHandle", xmlWriter);
                         

                                      if (localResultHandle==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localResultHandle);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultHandle"));
                                 
                                         elementList.add(localResultHandle==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultHandle));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static EndQuery parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        EndQuery object =
            new EndQuery();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"EndQuery".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (EndQuery)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ClassDefInfo_Array
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "ClassDefInfo_Array",
            "");

        

                    /**
                    * field for ClassDefInfo_Array
                    */

                    
                                protected ArrayOf_ClassDefInfo localClassDefInfo_Array ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_ClassDefInfo
                       */
                       public  ArrayOf_ClassDefInfo getClassDefInfo_Array(){
                           return localClassDefInfo_Array;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassDefInfo_Array
                           */
                           public void setClassDefInfo_Array(ArrayOf_ClassDefInfo param){
                        
                                        this.localClassDefInfo_Array=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localClassDefInfo_Array==null){
                               throw new org.apache.axis2.databinding.ADBException("ClassDefInfo_Array cannot be null!");
                             }
                             localClassDefInfo_Array.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localClassDefInfo_Array.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassDefInfo_Array parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassDefInfo_Array object =
            new ClassDefInfo_Array();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","ClassDefInfo_Array").equals(reader.getName())){
                            
                                            object.setClassDefInfo_Array(ArrayOf_ClassDefInfo.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class EndDate
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "endDate",
            "");

        

                    /**
                    * field for EndDate
                    */

                    
                                protected java.util.Calendar localEndDate ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.util.Calendar
                       */
                       public  java.util.Calendar getEndDate(){
                           return localEndDate;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param EndDate
                           */
                           public void setEndDate(java.util.Calendar param){
                        
                                        this.localEndDate=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "endDate";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":endDate",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "endDate",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localEndDate==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localEndDate==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static EndDate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        EndDate object =
            new EndDate();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","endDate").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setEndDate(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryComponent
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryComponent",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryComponent",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryComponent",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                                 
                                         elementList.add(localComponentId==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryComponent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryComponent object =
            new QueryComponent();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryComponent".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryComponent)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_SMComponent
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_SMComponent
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for SMComponent_element
                    * This was an Array!
                    */

                    
                                protected SMComponent[] localSMComponent_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localSMComponent_elementTracker = false ;

                       public boolean isSMComponent_elementSpecified(){
                           return localSMComponent_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return SMComponent[]
                       */
                       public  SMComponent[] getSMComponent_element(){
                           return localSMComponent_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for SMComponent_element
                           */
                          protected void validateSMComponent_element(SMComponent[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param SMComponent_element
                          */
                          public void setSMComponent_element(SMComponent[] param){
                          
                               validateSMComponent_element(param);

                           localSMComponent_elementTracker = param != null;
                                  
                                  this.localSMComponent_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param SMComponent
                         */
                         public void addSMComponent_element(SMComponent param){
                               if (localSMComponent_element == null){
                               localSMComponent_element = new SMComponent[]{};
                               }

                        
                             //update the setting tracker
                            localSMComponent_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localSMComponent_element);
                           list.add(param);
                           this.localSMComponent_element =
                         (SMComponent[])list.toArray(
                        new SMComponent[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_SMComponent",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_SMComponent",
                       xmlWriter);
               }

           
               }
            if (localSMComponent_elementTracker){
                                   if (localSMComponent_element!=null){
                                        for (int i = 0;i < localSMComponent_element.length;i++){
                                            if (localSMComponent_element[i] != null){
                                             localSMComponent_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponent_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("SMComponent_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localSMComponent_elementTracker){
                         if (localSMComponent_element!=null) {
                             for (int i = 0;i < localSMComponent_element.length;i++){

                                if (localSMComponent_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                      "SMComponent_element"));
                                     elementList.add(localSMComponent_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("SMComponent_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_SMComponent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_SMComponent object =
            new ArrayOf_SMComponent();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_SMComponent".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_SMComponent)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponent_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(SMComponent.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponent_element").equals(reader.getName())){
                                                                list1.add(SMComponent.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setSMComponent_element((SMComponent[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            SMComponent.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SetOrCleared
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "setOrCleared",
            "");

        

                    /**
                    * field for SetOrCleared
                    */

                    
                                protected int localSetOrCleared ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getSetOrCleared(){
                           return localSetOrCleared;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SetOrCleared
                           */
                           public void setSetOrCleared(int param){
                        
                                        this.localSetOrCleared=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "setOrCleared";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":setOrCleared",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "setOrCleared",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localSetOrCleared==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSetOrCleared));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSetOrCleared)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SetOrCleared parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SetOrCleared object =
            new SetOrCleared();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                                       object.setSetOrCleared(java.lang.Integer.MIN_VALUE);
                                   
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","setOrCleared").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSetOrCleared(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setSetOrCleared(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class DataType
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "DataType",
            "");

        

                    /**
                    * field for DataType
                    */

                    
                                protected java.lang.String localDataType ;
                            
                        private static java.util.HashMap _table_ = new java.util.HashMap();

                        // Constructor
                        
                            protected DataType(java.lang.String value, boolean isRegisterValue) {
                                localDataType = value;
                                if (isRegisterValue){
                                    
                                           _table_.put(localDataType, this);
                                       
                                }

                            }
                        
                                public static final java.lang.String _BYTE =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BYTE");
                            
                                public static final java.lang.String _SHORT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SHORT");
                            
                                public static final java.lang.String _INT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("INT");
                            
                                public static final java.lang.String _LONG =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("LONG");
                            
                                public static final java.lang.String _FLOAT =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("FLOAT");
                            
                                public static final java.lang.String _DOUBLE =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DOUBLE");
                            
                                public static final java.lang.String _STRING =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("STRING");
                            
                                public static final java.lang.String _BYTE_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("BYTE_ARRAY");
                            
                                public static final java.lang.String _SHORT_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SHORT_ARRAY");
                            
                                public static final java.lang.String _INT_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("INT_ARRAY");
                            
                                public static final java.lang.String _LONG_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("LONG_ARRAY");
                            
                                public static final java.lang.String _FLOAT_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("FLOAT_ARRAY");
                            
                                public static final java.lang.String _DOUBLE_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DOUBLE_ARRAY");
                            
                                public static final java.lang.String _STRING_ARRAY =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString("STRING_ARRAY");
                            
                            public static final DataType BYTE =
                                new DataType(_BYTE,true);
                        
                            public static final DataType SHORT =
                                new DataType(_SHORT,true);
                        
                            public static final DataType INT =
                                new DataType(_INT,true);
                        
                            public static final DataType LONG =
                                new DataType(_LONG,true);
                        
                            public static final DataType FLOAT =
                                new DataType(_FLOAT,true);
                        
                            public static final DataType DOUBLE =
                                new DataType(_DOUBLE,true);
                        
                            public static final DataType STRING =
                                new DataType(_STRING,true);
                        
                            public static final DataType BYTE_ARRAY =
                                new DataType(_BYTE_ARRAY,true);
                        
                            public static final DataType SHORT_ARRAY =
                                new DataType(_SHORT_ARRAY,true);
                        
                            public static final DataType INT_ARRAY =
                                new DataType(_INT_ARRAY,true);
                        
                            public static final DataType LONG_ARRAY =
                                new DataType(_LONG_ARRAY,true);
                        
                            public static final DataType FLOAT_ARRAY =
                                new DataType(_FLOAT_ARRAY,true);
                        
                            public static final DataType DOUBLE_ARRAY =
                                new DataType(_DOUBLE_ARRAY,true);
                        
                            public static final DataType STRING_ARRAY =
                                new DataType(_STRING_ARRAY,true);
                        

                            public java.lang.String getValue() { return localDataType;}

                            public boolean equals(java.lang.Object obj) {return (obj == this);}
                            public int hashCode() { return toString().hashCode();}
                            public java.lang.String toString() {
                            
                                    return localDataType.toString();
                                

                            }

                    

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = parentQName.getNamespaceURI();
                        java.lang.String _localName = parentQName.getLocalPart();
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":DataType",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "DataType",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localDataType==null){
                                        
                                                 throw new org.apache.axis2.databinding.ADBException("DataType cannot be null !!");
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localDataType);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDataType)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    
            public static DataType fromValue(java.lang.String value)
                  throws java.lang.IllegalArgumentException {
                DataType enumeration = (DataType)
                   
                           _table_.get(value);
                       

                if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }
                return enumeration;
            }
            public static DataType fromString(java.lang.String value,java.lang.String namespaceURI)
                  throws java.lang.IllegalArgumentException {
                try {
                   
                                   return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                               

                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static DataType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                java.lang.String content) {
                if (content.indexOf(":") > -1){
                    java.lang.String prefix = content.substring(0,content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return DataType.Factory.fromString(content,namespaceUri);
                } else {
                   return DataType.Factory.fromString(content,"");
                }
            }
        

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static DataType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        DataType object = null;
            // initialize a hash map to keep values
            java.util.Map attributeMap = new java.util.HashMap();
            java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
        

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement()  || reader.hasText()){
            
                                java.lang.String content = reader.getElementText();
                                
                                    if (content.indexOf(":") > 0) {
                                        // this seems to be a Qname so find the namespace and send
                                        prefix = content.substring(0, content.indexOf(":"));
                                        namespaceuri = reader.getNamespaceURI(prefix);
                                        object = DataType.Factory.fromString(content,namespaceuri);
                                    } else {
                                        // this seems to be not a qname send and empty namespace incase of it is
                                        // check is done in fromString method
                                        object = DataType.Factory.fromString(content,"");
                                    }
                                    
                                    
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SecurityToken
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "securityToken",
            "");

        

                    /**
                    * field for SecurityToken
                    */

                    
                                protected java.lang.String localSecurityToken ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSecurityToken(){
                           return localSecurityToken;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SecurityToken
                           */
                           public void setSecurityToken(java.lang.String param){
                        
                                        this.localSecurityToken=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "securityToken";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":securityToken",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "securityToken",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localSecurityToken==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localSecurityToken);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localSecurityToken==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSecurityToken)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SecurityToken parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SecurityToken object =
            new SecurityToken();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","securityToken").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSecurityToken(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ConnectionId
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "connectionId",
            "");

        

                    /**
                    * field for ConnectionId
                    */

                    
                                protected long localConnectionId ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getConnectionId(){
                           return localConnectionId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ConnectionId
                           */
                           public void setConnectionId(long param){
                        
                                        this.localConnectionId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "connectionId";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":connectionId",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "connectionId",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localConnectionId==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnectionId));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnectionId)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ConnectionId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ConnectionId object =
            new ConnectionId();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","connectionId").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setConnectionId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CStatus_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "CStatus_element",
            "");

        

                    /**
                    * field for CStatus_element
                    */

                    
                                protected CStatus localCStatus_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return CStatus
                       */
                       public  CStatus getCStatus_element(){
                           return localCStatus_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CStatus_element
                           */
                           public void setCStatus_element(CStatus param){
                        
                                        this.localCStatus_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localCStatus_element==null){
                               throw new org.apache.axis2.databinding.ADBException("CStatus_element cannot be null!");
                             }
                             localCStatus_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localCStatus_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CStatus_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CStatus_element object =
            new CStatus_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","CStatus_element").equals(reader.getName())){
                            
                                            object.setCStatus_element(CStatus.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_Event
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_Event
            Namespace URI = http://blueprint.bmc.com/Event
            Namespace Prefix = 
            */
        

                    /**
                    * field for Event_element
                    * This was an Array!
                    */

                    
                                protected Event[] localEvent_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localEvent_elementTracker = false ;

                       public boolean isEvent_elementSpecified(){
                           return localEvent_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return Event[]
                       */
                       public  Event[] getEvent_element(){
                           return localEvent_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for Event_element
                           */
                          protected void validateEvent_element(Event[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Event_element
                          */
                          public void setEvent_element(Event[] param){
                          
                               validateEvent_element(param);

                           localEvent_elementTracker = param != null;
                                  
                                  this.localEvent_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param Event
                         */
                         public void addEvent_element(Event param){
                               if (localEvent_element == null){
                               localEvent_element = new Event[]{};
                               }

                        
                             //update the setting tracker
                            localEvent_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localEvent_element);
                           list.add(param);
                           this.localEvent_element =
                         (Event[])list.toArray(
                        new Event[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/Event");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_Event",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_Event",
                       xmlWriter);
               }

           
               }
            if (localEvent_elementTracker){
                                   if (localEvent_element!=null){
                                        for (int i = 0;i < localEvent_element.length;i++){
                                            if (localEvent_element[i] != null){
                                             localEvent_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","Event_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("Event_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/Event")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localEvent_elementTracker){
                         if (localEvent_element!=null) {
                             for (int i = 0;i < localEvent_element.length;i++){

                                if (localEvent_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/Event",
                                                                      "Event_element"));
                                     elementList.add(localEvent_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("Event_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_Event parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_Event object =
            new ArrayOf_Event();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_Event".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_Event)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","Event_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(Event.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/Event","Event_element").equals(reader.getName())){
                                                                list1.add(Event.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setEvent_element((Event[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            Event.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryModelImpact
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryModelImpact",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryModelImpact",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryModelImpact",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                             
                                     elementList.add(localComponentId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                                 
                                         elementList.add(localSlotsList==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryModelImpact parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryModelImpact object =
            new QueryModelImpact();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryModelImpact".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryModelImpact)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_String
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_String
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for String_element
                    * This was an Array!
                    */

                    
                                protected java.lang.String[] localString_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localString_elementTracker = false ;

                       public boolean isString_elementSpecified(){
                           return localString_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return java.lang.String[]
                       */
                       public  java.lang.String[] getString_element(){
                           return localString_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for String_element
                           */
                          protected void validateString_element(java.lang.String[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param String_element
                          */
                          public void setString_element(java.lang.String[] param){
                          
                               validateString_element(param);

                           localString_elementTracker = param != null;
                                  
                                  this.localString_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param java.lang.String
                         */
                         public void addString_element(java.lang.String param){
                               if (localString_element == null){
                               localString_element = new java.lang.String[]{};
                               }

                        
                             //update the setting tracker
                            localString_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localString_element);
                           list.add(param);
                           this.localString_element =
                         (java.lang.String[])list.toArray(
                        new java.lang.String[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_String",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_String",
                       xmlWriter);
               }

           
               }
            if (localString_elementTracker){
                         if (localString_element!=null) {
                               namespace = "http://blueprint.bmc.com/BasicTypes";
                               for (int i = 0;i < localString_element.length;i++){
                                    
                                        if (localString_element[i] != null){
                                    
                                            writeStartElement(null, namespace, "string_element", xmlWriter);

                                        
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString_element[i]));
                                                
                                            xmlWriter.writeEndElement();
                                          
                                            } else {
                                               
                                                       // we have to do nothing since minOccurs is zero
                                                   
                                            }

                               }
                         } else {
                             
                                     throw new org.apache.axis2.databinding.ADBException("string_element cannot be null!!");
                                
                         }

                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localString_elementTracker){
                        if (localString_element!=null){
                              for (int i = 0;i < localString_element.length;i++){
                                  
                                     if (localString_element[i] != null){
                                      elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                          "string_element"));
                                      elementList.add(
                                      org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString_element[i]));
                                      } else {
                                         
                                                // have to do nothing
                                            
                                      }
                                  

                              }
                        } else {
                          
                                throw new org.apache.axis2.databinding.ADBException("string_element cannot be null!!");
                                
                            }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_String parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_String object =
            new ArrayOf_String();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_String".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_String)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","string_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(reader.getElementText());
                                        
                                        //loop until we find a start element that is not part of this array
                                        boolean loopDone1 = false;
                                        while(!loopDone1){
                                            // Ensure we are at the EndElement
                                            while (!reader.isEndElement()){
                                                reader.next();
                                            }
                                            // Step out of this element
                                            reader.next();
                                            // Step to next element event.
                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                reader.next();
                                            if (reader.isEndElement()){
                                                //two continuous end elements means we are exiting the xml structure
                                                loopDone1 = true;
                                            } else {
                                                if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","string_element").equals(reader.getName())){
                                                     list1.add(reader.getElementText());
                                                    
                                                }else{
                                                    loopDone1 = true;
                                                }
                                            }
                                        }
                                        // call the converter utility  to convert and set the array
                                        
                                                object.setString_element((java.lang.String[])
                                                    list1.toArray(new java.lang.String[list1.size()]));
                                            
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ClassDefInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ClassDefInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Class_parent_idx
                    */

                    
                                protected int localClass_parent_idx ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getClass_parent_idx(){
                           return localClass_parent_idx;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Class_parent_idx
                           */
                           public void setClass_parent_idx(int param){
                        
                                        this.localClass_parent_idx=param;
                                

                           }
                        

                    /**
                    * field for Class_child_cnt
                    */

                    
                                protected int localClass_child_cnt ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getClass_child_cnt(){
                           return localClass_child_cnt;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Class_child_cnt
                           */
                           public void setClass_child_cnt(int param){
                        
                                        this.localClass_child_cnt=param;
                                

                           }
                        

                    /**
                    * field for Class_name
                    */

                    
                                protected java.lang.String localClass_name ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getClass_name(){
                           return localClass_name;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Class_name
                           */
                           public void setClass_name(java.lang.String param){
                        
                                        this.localClass_name=param;
                                

                           }
                        

                    /**
                    * field for Child_idx
                    */

                    
                                protected ArrayOf_Int localChild_idx ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Int
                       */
                       public  ArrayOf_Int getChild_idx(){
                           return localChild_idx;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Child_idx
                           */
                           public void setChild_idx(ArrayOf_Int param){
                        
                                        this.localChild_idx=param;
                                

                           }
                        

                    /**
                    * field for Slots_count
                    */

                    
                                protected int localSlots_count ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getSlots_count(){
                           return localSlots_count;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slots_count
                           */
                           public void setSlots_count(int param){
                        
                                        this.localSlots_count=param;
                                

                           }
                        

                    /**
                    * field for Slots_list
                    */

                    
                                protected ArrayOf_SlotDefInfo localSlots_list ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_SlotDefInfo
                       */
                       public  ArrayOf_SlotDefInfo getSlots_list(){
                           return localSlots_list;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Slots_list
                           */
                           public void setSlots_list(ArrayOf_SlotDefInfo param){
                        
                                        this.localSlots_list=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ClassDefInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ClassDefInfo",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "class_parent_idx", xmlWriter);
                         
                                           if (localClass_parent_idx==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("class_parent_idx cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClass_parent_idx));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "class_child_cnt", xmlWriter);
                         
                                           if (localClass_child_cnt==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("class_child_cnt cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClass_child_cnt));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "class_name", xmlWriter);
                         

                                      if (localClass_name==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("class_name cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localClass_name);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                        if (localChild_idx==null){
                                             throw new org.apache.axis2.databinding.ADBException("child_idx cannot be null!!");
                                        }
                                       localChild_idx.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","child_idx"),
                                           xmlWriter);
                                    
                                namespace = "http://blueprint.bmc.com/ImapiTypes";
                                writeStartElement(null, namespace, "slots_count", xmlWriter);
                         
                                           if (localSlots_count==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("slots_count cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlots_count));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                        if (localSlots_list==null){
                                             throw new org.apache.axis2.databinding.ADBException("slots_list cannot be null!!");
                                        }
                                       localSlots_list.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slots_list"),
                                           xmlWriter);
                                    
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "class_parent_idx"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClass_parent_idx));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "class_child_cnt"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClass_child_cnt));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "class_name"));
                             
                                    if (localClass_name != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClass_name));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("class_name cannot be null!!");
                                    }
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "child_idx"));
                        
                        
                                if (localChild_idx==null){
                                     throw new org.apache.axis2.databinding.ADBException("child_idx cannot be null!!");
                                }
                                elementList.add(localChild_idx);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slots_count"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlots_count));
                        
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                  "slots_list"));
                        
                        
                                if (localSlots_list==null){
                                     throw new org.apache.axis2.databinding.ADBException("slots_list cannot be null!!");
                                    }
                                    elementList.add(localSlots_list);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassDefInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassDefInfo object =
            new ClassDefInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ClassDefInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ClassDefInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","class_parent_idx").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClass_parent_idx(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","class_child_cnt").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClass_child_cnt(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","class_name").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClass_name(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","child_idx").equals(reader.getName())){
                            
                                            object.setChild_idx(ArrayOf_Int.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slots_count").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlots_count(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","slots_list").equals(reader.getName())){
                            
                                            object.setSlots_list(ArrayOf_SlotDefInfo.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class NameValue_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "NameValue_element",
            "");

        

                    /**
                    * field for NameValue_element
                    */

                    
                                protected NameValue localNameValue_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return NameValue
                       */
                       public  NameValue getNameValue_element(){
                           return localNameValue_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param NameValue_element
                           */
                           public void setNameValue_element(NameValue param){
                        
                                        this.localNameValue_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localNameValue_element==null){
                               throw new org.apache.axis2.databinding.ADBException("NameValue_element cannot be null!");
                             }
                             localNameValue_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localNameValue_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static NameValue_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        NameValue_element object =
            new NameValue_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValue_element").equals(reader.getName())){
                            
                                            object.setNameValue_element(NameValue.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryModelPossibleRootCauses
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryModelPossibleRootCauses",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for ComponentId
                    */

                    
                                protected java.lang.String localComponentId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentId(){
                           return localComponentId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentId
                           */
                           public void setComponentId(java.lang.String param){
                        
                                        this.localComponentId=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

                    /**
                    * field for TrueCause
                    */

                    
                                protected boolean localTrueCause ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getTrueCause(){
                           return localTrueCause;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param TrueCause
                           */
                           public void setTrueCause(boolean param){
                        
                                        this.localTrueCause=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryModelPossibleRootCauses",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryModelPossibleRootCauses",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "componentId", xmlWriter);
                         

                                      if (localComponentId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localComponentId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "trueCause", xmlWriter);
                         
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("trueCause cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTrueCause));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "componentId"));
                             
                                     elementList.add(localComponentId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                             
                                     elementList.add(localSlotsList==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "trueCause"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTrueCause));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryModelPossibleRootCauses parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryModelPossibleRootCauses object =
            new QueryModelPossibleRootCauses();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryModelPossibleRootCauses".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryModelPossibleRootCauses)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","componentId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","trueCause").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTrueCause(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class StateChangeType_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "StateChangeType_element",
            "");

        

                    /**
                    * field for StateChangeType_element
                    */

                    
                                protected StateChangeType localStateChangeType_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return StateChangeType
                       */
                       public  StateChangeType getStateChangeType_element(){
                           return localStateChangeType_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StateChangeType_element
                           */
                           public void setStateChangeType_element(StateChangeType param){
                        
                                        this.localStateChangeType_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localStateChangeType_element==null){
                               throw new org.apache.axis2.databinding.ADBException("StateChangeType_element cannot be null!");
                             }
                             localStateChangeType_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localStateChangeType_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static StateChangeType_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        StateChangeType_element object =
            new StateChangeType_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","StateChangeType_element").equals(reader.getName())){
                            
                                            object.setStateChangeType_element(StateChangeType.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Connect
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "Connect",
            "");

        

                    /**
                    * field for UserName
                    */

                    
                                protected java.lang.String localUserName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getUserName(){
                           return localUserName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param UserName
                           */
                           public void setUserName(java.lang.String param){
                        
                                        this.localUserName=param;
                                

                           }
                        

                    /**
                    * field for Password
                    */

                    
                                protected java.lang.String localPassword ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getPassword(){
                           return localPassword;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Password
                           */
                           public void setPassword(java.lang.String param){
                        
                                        this.localPassword=param;
                                

                           }
                        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for BufferType
                    */

                    
                                protected IMBufferType localBufferType ;
                            

                       /**
                       * Auto generated getter method
                       * @return IMBufferType
                       */
                       public  IMBufferType getBufferType(){
                           return localBufferType;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BufferType
                           */
                           public void setBufferType(IMBufferType param){
                        
                                        this.localBufferType=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":Connect",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "Connect",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "userName", xmlWriter);
                         

                                      if (localUserName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localUserName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "password", xmlWriter);
                         

                                      if (localPassword==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localPassword);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                if (localBufferType==null){

                                    writeStartElement(null, "http://blueprint.bmc.com/ImapiElems", "bufferType", xmlWriter);

                                   // write the nil attribute
                                  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                  xmlWriter.writeEndElement();
                                }else{
                                 localBufferType.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","bufferType"),
                                    xmlWriter);
                                }
                            
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "userName"));
                             
                                     elementList.add(localUserName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "password"));
                             
                                     elementList.add(localPassword==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPassword));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "bufferType"));
                            
                            
                                    elementList.add(localBufferType==null?null:
                                    localBufferType);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Connect parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Connect object =
            new Connect();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"Connect".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Connect)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","userName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setUserName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","password").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setPassword(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","bufferType").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setBufferType(null);
                                      reader.next();
                                        
                                        reader.next();
                                      
                                  }else{
                                
                                            object.setBufferType(IMBufferType.Factory.parse(reader));
                                          
                                    reader.next();
                                }
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryEventByID
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryEventByID",
            "");

        

                    /**
                    * field for EventId
                    */

                    
                                protected java.lang.String localEventId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getEventId(){
                           return localEventId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param EventId
                           */
                           public void setEventId(java.lang.String param){
                        
                                        this.localEventId=param;
                                

                           }
                        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryEventByID",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryEventByID",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "eventId", xmlWriter);
                         

                                      if (localEventId==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localEventId);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "eventId"));
                             
                                     elementList.add(localEventId==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEventId));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                                 
                                         elementList.add(localImname==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryEventByID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryEventByID object =
            new QueryEventByID();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryEventByID".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryEventByID)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","eventId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setEventId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class TableOf_NameValue
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = TableOf_NameValue
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for NameValueArray_element
                    * This was an Array!
                    */

                    
                                protected ArrayOf_NameValue[] localNameValueArray_element ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localNameValueArray_elementTracker = false ;

                       public boolean isNameValueArray_elementSpecified(){
                           return localNameValueArray_elementTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_NameValue[]
                       */
                       public  ArrayOf_NameValue[] getNameValueArray_element(){
                           return localNameValueArray_element;
                       }

                       
                    


                           
                          /**
                           * validate the array for NameValueArray_element
                           */
                          protected void validateNameValueArray_element(ArrayOf_NameValue[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param NameValueArray_element
                          */
                          public void setNameValueArray_element(ArrayOf_NameValue[] param){
                          
                               validateNameValueArray_element(param);

                           localNameValueArray_elementTracker = param != null;
                                  
                                  this.localNameValueArray_element=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param ArrayOf_NameValue
                         */
                         public void addNameValueArray_element(ArrayOf_NameValue param){
                               if (localNameValueArray_element == null){
                               localNameValueArray_element = new ArrayOf_NameValue[]{};
                               }

                        
                             //update the setting tracker
                            localNameValueArray_elementTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localNameValueArray_element);
                           list.add(param);
                           this.localNameValueArray_element =
                         (ArrayOf_NameValue[])list.toArray(
                        new ArrayOf_NameValue[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":TableOf_NameValue",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "TableOf_NameValue",
                       xmlWriter);
               }

           
               }
            if (localNameValueArray_elementTracker){
                                   if (localNameValueArray_element!=null){
                                        for (int i = 0;i < localNameValueArray_element.length;i++){
                                            if (localNameValueArray_element[i] != null){
                                             localNameValueArray_element[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValueArray_element"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("NameValueArray_element cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localNameValueArray_elementTracker){
                         if (localNameValueArray_element!=null) {
                             for (int i = 0;i < localNameValueArray_element.length;i++){

                                if (localNameValueArray_element[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                      "NameValueArray_element"));
                                     elementList.add(localNameValueArray_element[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("NameValueArray_element cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static TableOf_NameValue parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        TableOf_NameValue object =
            new TableOf_NameValue();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"TableOf_NameValue".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (TableOf_NameValue)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValueArray_element").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(ArrayOf_NameValue.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValueArray_element").equals(reader.getName())){
                                                                list1.add(ArrayOf_NameValue.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setNameValueArray_element((ArrayOf_NameValue[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            ArrayOf_NameValue.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Connection
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "connection",
            "");

        

                    /**
                    * field for Connection
                    */

                    
                                protected long localConnection ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getConnection(){
                           return localConnection;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Connection
                           */
                           public void setConnection(long param){
                        
                                        this.localConnection=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "connection";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":connection",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "connection",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localConnection==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Connection parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Connection object =
            new Connection();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","connection").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setConnection(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetQueryResultCount_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetQueryResultCount_output",
            "");

        

                    /**
                    * field for ResultCount
                    */

                    
                                protected long localResultCount ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getResultCount(){
                           return localResultCount;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultCount
                           */
                           public void setResultCount(long param){
                        
                                        this.localResultCount=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetQueryResultCount_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetQueryResultCount_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultCount", xmlWriter);
                         
                                           if (localResultCount==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("resultCount cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCount));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCount));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetQueryResultCount_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetQueryResultCount_output object =
            new GetQueryResultCount_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetQueryResultCount_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetQueryResultCount_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultCount").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultCount(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SendEvent
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SendEvent",
            "");

        

                    /**
                    * field for Connection
                    */

                    
                                protected long localConnection ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getConnection(){
                           return localConnection;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Connection
                           */
                           public void setConnection(long param){
                        
                                        this.localConnection=param;
                                

                           }
                        

                    /**
                    * field for Message
                    */

                    
                                protected Event localMessage ;
                            

                       /**
                       * Auto generated getter method
                       * @return Event
                       */
                       public  Event getMessage(){
                           return localMessage;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Message
                           */
                           public void setMessage(Event param){
                        
                                        this.localMessage=param;
                                

                           }
                        

                    /**
                    * field for Timeout
                    */

                    
                                protected int localTimeout ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getTimeout(){
                           return localTimeout;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Timeout
                           */
                           public void setTimeout(int param){
                        
                                        this.localTimeout=param;
                                

                           }
                        

                    /**
                    * field for MessageClass
                    */

                    
                                protected java.lang.String localMessageClass ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getMessageClass(){
                           return localMessageClass;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param MessageClass
                           */
                           public void setMessageClass(java.lang.String param){
                        
                                        this.localMessageClass=param;
                                

                           }
                        

                    /**
                    * field for MessageType
                    */

                    
                                protected IMMessageType localMessageType ;
                            

                       /**
                       * Auto generated getter method
                       * @return IMMessageType
                       */
                       public  IMMessageType getMessageType(){
                           return localMessageType;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param MessageType
                           */
                           public void setMessageType(IMMessageType param){
                        
                                        this.localMessageType=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SendEvent",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SendEvent",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "connection", xmlWriter);
                         
                                           if (localConnection==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("connection cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                if (localMessage==null){

                                    writeStartElement(null, "http://blueprint.bmc.com/ImapiElems", "message", xmlWriter);

                                   // write the nil attribute
                                  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                  xmlWriter.writeEndElement();
                                }else{
                                 localMessage.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","message"),
                                    xmlWriter);
                                }
                            
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "timeout", xmlWriter);
                         
                                           if (localTimeout==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("timeout cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "messageClass", xmlWriter);
                         

                                      if (localMessageClass==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("messageClass cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localMessageClass);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                if (localMessageType==null){

                                    writeStartElement(null, "http://blueprint.bmc.com/ImapiElems", "messageType", xmlWriter);

                                   // write the nil attribute
                                  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                  xmlWriter.writeEndElement();
                                }else{
                                 localMessageType.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","messageType"),
                                    xmlWriter);
                                }
                            
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "connection"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localConnection));
                        
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "message"));
                        
                        
                                elementList.add(localMessage==null?null:
                                localMessage);
                            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "timeout"));
                             
                            elementList.add(
                               org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeout));
                        
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "messageClass"));
                             
                                    if (localMessageClass != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageClass));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("messageClass cannot be null!!");
                                    }
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "messageType"));
                            
                            
                                    elementList.add(localMessageType==null?null:
                                    localMessageType);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SendEvent parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SendEvent object =
            new SendEvent();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SendEvent".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SendEvent)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","connection").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setConnection(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","message").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setMessage(null);
                                      reader.next();
                                        
                                        reader.next();
                                      
                                  }else{
                                
                                            object.setMessage(Event.Factory.parse(reader));
                                          
                                    reader.next();
                                }
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","timeout").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setTimeout(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","messageClass").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setMessageClass(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","messageType").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setMessageType(null);
                                      reader.next();
                                        
                                        reader.next();
                                      
                                  }else{
                                
                                            object.setMessageType(IMMessageType.Factory.parse(reader));
                                          
                                    reader.next();
                                }
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class UserName
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "userName",
            "");

        

                    /**
                    * field for UserName
                    */

                    
                                protected java.lang.String localUserName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getUserName(){
                           return localUserName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param UserName
                           */
                           public void setUserName(java.lang.String param){
                        
                                        this.localUserName=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "userName";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":userName",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "userName",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localUserName==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localUserName);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localUserName==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserName)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static UserName parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        UserName object =
            new UserName();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","userName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setUserName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ComponentCauseId
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "componentCauseId",
            "");

        

                    /**
                    * field for ComponentCauseId
                    */

                    
                                protected java.lang.String localComponentCauseId ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getComponentCauseId(){
                           return localComponentCauseId;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ComponentCauseId
                           */
                           public void setComponentCauseId(java.lang.String param){
                        
                                        this.localComponentCauseId=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "componentCauseId";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":componentCauseId",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "componentCauseId",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localComponentCauseId==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localComponentCauseId);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localComponentCauseId==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localComponentCauseId)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ComponentCauseId parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ComponentCauseId object =
            new ComponentCauseId();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","componentCauseId").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setComponentCauseId(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SetMaintenanceMode_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "SetMaintenanceMode_output",
            "");

        

                    /**
                    * field for ErrorCode
                    */

                    
                                protected int localErrorCode ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getErrorCode(){
                           return localErrorCode;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ErrorCode
                           */
                           public void setErrorCode(int param){
                        
                                        this.localErrorCode=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":SetMaintenanceMode_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "SetMaintenanceMode_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "errorCode", xmlWriter);
                         
                                           if (localErrorCode==java.lang.Integer.MIN_VALUE) {
                                       
                                                     writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "errorCode"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localErrorCode));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SetMaintenanceMode_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SetMaintenanceMode_output object =
            new SetMaintenanceMode_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"SetMaintenanceMode_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (SetMaintenanceMode_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","errorCode").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setErrorCode(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                                   } else {
                                       
                                       
                                               object.setErrorCode(java.lang.Integer.MIN_VALUE);
                                           
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Query
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "query",
            "");

        

                    /**
                    * field for Query
                    */

                    
                                protected java.lang.String localQuery ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getQuery(){
                           return localQuery;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Query
                           */
                           public void setQuery(java.lang.String param){
                        
                                        this.localQuery=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "query";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":query",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "query",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localQuery==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localQuery);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localQuery==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQuery)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Query parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Query object =
            new Query();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","query").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setQuery(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class BaseClass
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "baseClass",
            "");

        

                    /**
                    * field for BaseClass
                    */

                    
                                protected java.lang.String localBaseClass ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getBaseClass(){
                           return localBaseClass;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param BaseClass
                           */
                           public void setBaseClass(java.lang.String param){
                        
                                        this.localBaseClass=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "baseClass";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":baseClass",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "baseClass",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localBaseClass==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localBaseClass);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localBaseClass==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBaseClass)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static BaseClass parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        BaseClass object =
            new BaseClass();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","baseClass").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setBaseClass(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryMode_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "QueryMode_element",
            "");

        

                    /**
                    * field for QueryMode_element
                    */

                    
                                protected QueryMode localQueryMode_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return QueryMode
                       */
                       public  QueryMode getQueryMode_element(){
                           return localQueryMode_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param QueryMode_element
                           */
                           public void setQueryMode_element(QueryMode param){
                        
                                        this.localQueryMode_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localQueryMode_element==null){
                               throw new org.apache.axis2.databinding.ADBException("QueryMode_element cannot be null!");
                             }
                             localQueryMode_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localQueryMode_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryMode_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryMode_element object =
            new QueryMode_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","QueryMode_element").equals(reader.getName())){
                            
                                            object.setQueryMode_element(QueryMode.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RegisterStateChange_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "RegisterStateChange_output",
            "");

        

                    /**
                    * field for RegistrationID
                    */

                    
                                protected java.lang.String localRegistrationID ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getRegistrationID(){
                           return localRegistrationID;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RegistrationID
                           */
                           public void setRegistrationID(java.lang.String param){
                        
                                        this.localRegistrationID=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":RegisterStateChange_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "RegisterStateChange_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "registrationID", xmlWriter);
                         

                                      if (localRegistrationID==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localRegistrationID);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "registrationID"));
                                 
                                         elementList.add(localRegistrationID==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistrationID));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RegisterStateChange_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RegisterStateChange_output object =
            new RegisterStateChange_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"RegisterStateChange_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (RegisterStateChange_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","registrationID").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setRegistrationID(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class FilterName
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "filterName",
            "");

        

                    /**
                    * field for FilterName
                    */

                    
                                protected java.lang.String localFilterName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getFilterName(){
                           return localFilterName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FilterName
                           */
                           public void setFilterName(java.lang.String param){
                        
                                        this.localFilterName=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "filterName";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":filterName",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "filterName",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localFilterName==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localFilterName);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localFilterName==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterName)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static FilterName parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        FilterName object =
            new FilterName();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","filterName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFilterName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class NameValueTable_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "NameValueTable_element",
            "");

        

                    /**
                    * field for NameValueTable_element
                    */

                    
                                protected TableOf_NameValue localNameValueTable_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return TableOf_NameValue
                       */
                       public  TableOf_NameValue getNameValueTable_element(){
                           return localNameValueTable_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param NameValueTable_element
                           */
                           public void setNameValueTable_element(TableOf_NameValue param){
                        
                                        this.localNameValueTable_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localNameValueTable_element==null){
                               throw new org.apache.axis2.databinding.ADBException("NameValueTable_element cannot be null!");
                             }
                             localNameValueTable_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localNameValueTable_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static NameValueTable_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        NameValueTable_element object =
            new NameValueTable_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","NameValueTable_element").equals(reader.getName())){
                            
                                            object.setNameValueTable_element(TableOf_NameValue.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetEvents
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetEvents",
            "");

        

                    /**
                    * field for FilterName
                    */

                    
                                protected java.lang.String localFilterName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getFilterName(){
                           return localFilterName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FilterName
                           */
                           public void setFilterName(java.lang.String param){
                        
                                        this.localFilterName=param;
                                

                           }
                        

                    /**
                    * field for Context_nio
                    */

                    
                                protected java.lang.String localContext_nio ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getContext_nio(){
                           return localContext_nio;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Context_nio
                           */
                           public void setContext_nio(java.lang.String param){
                        
                                        this.localContext_nio=param;
                                

                           }
                        

                    /**
                    * field for Num_of_events
                    */

                    
                                protected int localNum_of_events ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_events(){
                           return localNum_of_events;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_events
                           */
                           public void setNum_of_events(int param){
                        
                                        this.localNum_of_events=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetEvents",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetEvents",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "filterName", xmlWriter);
                         

                                      if (localFilterName==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localFilterName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "context_nio", xmlWriter);
                         

                                      if (localContext_nio==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localContext_nio);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "num_of_events", xmlWriter);
                         
                                           if (localNum_of_events==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("num_of_events cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "filterName"));
                             
                                     elementList.add(localFilterName==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFilterName));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "context_nio"));
                             
                                     elementList.add(localContext_nio==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContext_nio));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "num_of_events"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_events));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetEvents parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetEvents object =
            new GetEvents();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetEvents".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetEvents)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","filterName").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setFilterName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","context_nio").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setContext_nio(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","num_of_events").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_events(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class GetEvents_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "GetEvents_output",
            "");

        

                    /**
                    * field for GetEventsResponse
                    */

                    
                                protected GetEventsResponse localGetEventsResponse ;
                            

                       /**
                       * Auto generated getter method
                       * @return GetEventsResponse
                       */
                       public  GetEventsResponse getGetEventsResponse(){
                           return localGetEventsResponse;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param GetEventsResponse
                           */
                           public void setGetEventsResponse(GetEventsResponse param){
                        
                                        this.localGetEventsResponse=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":GetEvents_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "GetEvents_output",
                       xmlWriter);
               }

           
               }
           
                                if (localGetEventsResponse==null){

                                    writeStartElement(null, "http://blueprint.bmc.com/ImapiElems", "getEventsResponse", xmlWriter);

                                   // write the nil attribute
                                  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                  xmlWriter.writeEndElement();
                                }else{
                                 localGetEventsResponse.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","getEventsResponse"),
                                    xmlWriter);
                                }
                            
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "getEventsResponse"));
                            
                            
                                    elementList.add(localGetEventsResponse==null?null:
                                    localGetEventsResponse);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static GetEvents_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        GetEvents_output object =
            new GetEvents_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"GetEvents_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (GetEvents_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","getEventsResponse").equals(reader.getName())){
                            
                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                      object.setGetEventsResponse(null);
                                      reader.next();
                                        
                                        reader.next();
                                      
                                  }else{
                                
                                            object.setGetEventsResponse(GetEventsResponse.Factory.parse(reader));
                                          
                                    reader.next();
                                }
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class NameValue
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = NameValue
            Namespace URI = http://blueprint.bmc.com/BasicTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Name
                    */

                    
                                protected java.lang.String localName ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getName(){
                           return localName;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Name
                           */
                           public void setName(java.lang.String param){
                        
                                        this.localName=param;
                                

                           }
                        

                    /**
                    * field for Value
                    */

                    
                                protected Value localValue ;
                            

                       /**
                       * Auto generated getter method
                       * @return Value
                       */
                       public  Value getValue(){
                           return localValue;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Value
                           */
                           public void setValue(Value param){
                        
                                        this.localValue=param;
                                

                           }
                        

                    /**
                    * field for Value_type
                    */

                    
                                protected DataType localValue_type ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localValue_typeTracker = false ;

                       public boolean isValue_typeSpecified(){
                           return localValue_typeTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return DataType
                       */
                       public  DataType getValue_type(){
                           return localValue_type;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Value_type
                           */
                           public void setValue_type(DataType param){
                        localValue_typeTracker = param != null;
                               
                                        this.localValue_type=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/BasicTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":NameValue",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "NameValue",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/BasicTypes";
                                writeStartElement(null, namespace, "name", xmlWriter);
                         

                                      if (localName==null){
                                          // write the nil attribute
                                          
                                                 throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localName);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                        if (localValue==null){
                                             throw new org.apache.axis2.databinding.ADBException("value cannot be null!!");
                                        }
                                       localValue.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","value"),
                                           xmlWriter);
                                     if (localValue_typeTracker){
                                        if (localValue_type==null){
                                             throw new org.apache.axis2.databinding.ADBException("value_type cannot be null!!");
                                        }
                                       localValue_type.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","value_type"),
                                           xmlWriter);
                                    }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "name"));
                             
                                    if (localName != null){
                                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localName));
                                    } else {
                                       throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
                                    }
                                
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "value"));
                        
                        
                                if (localValue==null){
                                     throw new org.apache.axis2.databinding.ADBException("value cannot be null!!");
                                }
                                elementList.add(localValue);
                             if (localValue_typeTracker){
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes",
                                                                  "value_type"));
                        
                        
                                if (localValue_type==null){
                                     throw new org.apache.axis2.databinding.ADBException("value_type cannot be null!!");
                                    }
                                    elementList.add(localValue_type);
                                }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static NameValue parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        NameValue object =
            new NameValue();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"NameValue".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (NameValue)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","name").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setName(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","value").equals(reader.getName())){
                            
                                            object.setValue(Value.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","value_type").equals(reader.getName())){
                            
                                            object.setValue_type(DataType.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class RegID
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "regID",
            "");

        

                    /**
                    * field for RegID
                    */

                    
                                protected java.lang.String localRegID ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getRegID(){
                           return localRegID;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RegID
                           */
                           public void setRegID(java.lang.String param){
                        
                                        this.localRegID=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "regID";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":regID",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "regID",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localRegID==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localRegID);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localRegID==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegID)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static RegID parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        RegID object =
            new RegID();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","regID").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setRegID(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryClassDefinitions_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryClassDefinitions_output",
            "");

        

                    /**
                    * field for ClassDefs
                    */

                    
                                protected ArrayOf_ClassDefInfo localClassDefs ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_ClassDefInfo
                       */
                       public  ArrayOf_ClassDefInfo getClassDefs(){
                           return localClassDefs;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassDefs
                           */
                           public void setClassDefs(ArrayOf_ClassDefInfo param){
                        
                                        this.localClassDefs=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryClassDefinitions_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryClassDefinitions_output",
                       xmlWriter);
               }

           
               }
           
                                        if (localClassDefs==null){
                                             throw new org.apache.axis2.databinding.ADBException("classDefs cannot be null!!");
                                        }
                                       localClassDefs.serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","classDefs"),
                                           xmlWriter);
                                    
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                        elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "classDefs"));
                        
                        
                                if (localClassDefs==null){
                                     throw new org.apache.axis2.databinding.ADBException("classDefs cannot be null!!");
                                    }
                                    elementList.add(localClassDefs);
                                

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryClassDefinitions_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryClassDefinitions_output object =
            new QueryClassDefinitions_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryClassDefinitions_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryClassDefinitions_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","classDefs").equals(reader.getName())){
                            
                                            object.setClassDefs(ArrayOf_ClassDefInfo.Factory.parse(reader));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class SMComponent_element
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "SMComponent_element",
            "");

        

                    /**
                    * field for SMComponent_element
                    */

                    
                                protected SMComponent localSMComponent_element ;
                            

                       /**
                       * Auto generated getter method
                       * @return SMComponent
                       */
                       public  SMComponent getSMComponent_element(){
                           return localSMComponent_element;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SMComponent_element
                           */
                           public void setSMComponent_element(SMComponent param){
                        
                                        this.localSMComponent_element=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localSMComponent_element==null){
                               throw new org.apache.axis2.databinding.ADBException("SMComponent_element cannot be null!");
                             }
                             localSMComponent_element.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localSMComponent_element.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static SMComponent_element parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        SMComponent_element object =
            new SMComponent_element();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","SMComponent_element").equals(reader.getName())){
                            
                                            object.setSMComponent_element(SMComponent.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Reliable
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "reliable",
            "");

        

                    /**
                    * field for Reliable
                    */

                    
                                protected boolean localReliable ;
                            

                       /**
                       * Auto generated getter method
                       * @return boolean
                       */
                       public  boolean getReliable(){
                           return localReliable;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Reliable
                           */
                           public void setReliable(boolean param){
                        
                                        this.localReliable=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "reliable";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":reliable",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "reliable",
                                       xmlWriter);
                               }
                           }
                        
                                           if (false) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReliable));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReliable)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Reliable parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Reliable object =
            new Reliable();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","reliable").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setReliable(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ClassNames
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "classNames",
            "");

        

                    /**
                    * field for ClassNames
                    */

                    
                                protected java.lang.String localClassNames ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getClassNames(){
                           return localClassNames;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassNames
                           */
                           public void setClassNames(java.lang.String param){
                        
                                        this.localClassNames=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "classNames";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":classNames",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "classNames",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localClassNames==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localClassNames);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localClassNames==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassNames)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ClassNames parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ClassNames object =
            new ClassNames();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","classNames").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassNames(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Execution_fault
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "execution_fault",
            "");

        

                    /**
                    * field for IMFailure
                    */

                    
                                protected java.lang.String localIMFailure ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getIMFailure(){
                           return localIMFailure;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param IMFailure
                           */
                           public void setIMFailure(java.lang.String param){
                        
                                        this.localIMFailure=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":execution_fault",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "execution_fault",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "IMFailure", xmlWriter);
                         

                                      if (localIMFailure==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localIMFailure);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "IMFailure"));
                                 
                                         elementList.add(localIMFailure==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIMFailure));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Execution_fault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Execution_fault object =
            new Execution_fault();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"execution_fault".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (Execution_fault)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","IMFailure").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setIMFailure(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class ArrayOf_SlotDefInfo
    implements org.apache.axis2.databinding.ADBBean{
    /* This type was generated from the piece of schema that had
            name = ArrayOf_SlotDefInfo
            Namespace URI = http://blueprint.bmc.com/ImapiTypes
            Namespace Prefix = 
            */
        

                    /**
                    * field for Items
                    * This was an Array!
                    */

                    
                                protected SlotDefInfo[] localItems ;
                            
                       /*  This tracker boolean wil be used to detect whether the user called the set method
                      *   for this attribute. It will be used to determine whether to include this field
                       *   in the serialized XML
                       */
                       protected boolean localItemsTracker = false ;

                       public boolean isItemsSpecified(){
                           return localItemsTracker;
                       }

                       

                       /**
                       * Auto generated getter method
                       * @return SlotDefInfo[]
                       */
                       public  SlotDefInfo[] getItems(){
                           return localItems;
                       }

                       
                    


                           
                          /**
                           * validate the array for Items
                           */
                          protected void validateItems(SlotDefInfo[] param){
                         
                          }


                         /**
                          * Auto generated setter method
                          * @param param Items
                          */
                          public void setItems(SlotDefInfo[] param){
                          
                               validateItems(param);

                           localItemsTracker = param != null;
                                  
                                  this.localItems=param;
                          }

                           
                         
                         /**
                         * Auto generated add method for the array for convenience
                         * @param param SlotDefInfo
                         */
                         public void addItems(SlotDefInfo param){
                               if (localItems == null){
                               localItems = new SlotDefInfo[]{};
                               }

                        
                             //update the setting tracker
                            localItemsTracker = true;
                        

                           java.util.List list =
                        org.apache.axis2.databinding.utils.ConverterUtil.toList(localItems);
                           list.add(param);
                           this.localItems =
                         (SlotDefInfo[])list.toArray(
                        new SlotDefInfo[list.size()]);

                         }
                         

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
           return factory.createOMElement(dataSource,parentQName);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":ArrayOf_SlotDefInfo",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "ArrayOf_SlotDefInfo",
                       xmlWriter);
               }

           
               }
            if (localItemsTracker){
                                   if (localItems!=null){
                                        for (int i = 0;i < localItems.length;i++){
                                            if (localItems[i] != null){
                                             localItems[i].serialize(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items"),
                                                       xmlWriter);
                                            } else {
                                               
                                                    // we don't have to do any thing since minOccures is zero
                                                
                                            }

                                        }
                                 } else {
                                    
                                           throw new org.apache.axis2.databinding.ADBException("items cannot be null!!");
                                    
                                }
                             }
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

             if (localItemsTracker){
                         if (localItems!=null) {
                             for (int i = 0;i < localItems.length;i++){

                                if (localItems[i] != null){
                                     elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes",
                                                                      "items"));
                                     elementList.add(localItems[i]);
                                } else {
                                    
                                            // nothing to do
                                        
                                }

                             }
                         } else {
                             
                                    throw new org.apache.axis2.databinding.ADBException("items cannot be null!!");
                                    
                             }

                        }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static ArrayOf_SlotDefInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        ArrayOf_SlotDefInfo object =
            new ArrayOf_SlotDefInfo();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"ArrayOf_SlotDefInfo".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (ArrayOf_SlotDefInfo)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                    java.util.ArrayList list1 = new java.util.ArrayList();
                
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items").equals(reader.getName())){
                            
                                
                                
                                // Process the array and step past its final element's end.
                                list1.add(SlotDefInfo.Factory.parse(reader));
                                                            
                                                    //loop until we find a start element that is not part of this array
                                                    boolean loopDone1 = false;
                                                    while(!loopDone1){
                                                        // We should be at the end element, but make sure
                                                        while (!reader.isEndElement())
                                                            reader.next();
                                                        // Step out of this element
                                                        reader.next();
                                                        // Step to next element event.
                                                        while (!reader.isStartElement() && !reader.isEndElement())
                                                            reader.next();
                                                        if (reader.isEndElement()){
                                                            //two continuous end elements means we are exiting the xml structure
                                                            loopDone1 = true;
                                                        } else {
                                                            if (new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","items").equals(reader.getName())){
                                                                list1.add(SlotDefInfo.Factory.parse(reader));
                                                                    
                                                            }else{
                                                                loopDone1 = true;
                                                            }
                                                        }
                                                    }
                                                    // call the converter utility  to convert and set the array
                                                    
                                                    object.setItems((SlotDefInfo[])
                                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                            SlotDefInfo.class,
                                                            list1));
                                                        
                          }  // End of if for expected property start element
                            
                                else {
                                    
                                }
                              
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CStatusHigh
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "cStatusHigh",
            "");

        

                    /**
                    * field for CStatusHigh
                    */

                    
                                protected java.lang.String localCStatusHigh ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getCStatusHigh(){
                           return localCStatusHigh;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CStatusHigh
                           */
                           public void setCStatusHigh(java.lang.String param){
                        
                                        this.localCStatusHigh=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "cStatusHigh";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":cStatusHigh",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "cStatusHigh",
                                       xmlWriter);
                               }
                           }
                        
                                      if (localCStatusHigh==null){
                                        
                                                 // write the nil attribute
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                            
                                     }else{
                                    
                                                   xmlWriter.writeCharacters(localCStatusHigh);
                                        
                                     }
                                
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                
                                if (localCStatusHigh==null){
                                      return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
                                }else{
                                   return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                       new java.lang.Object[]{
                                      org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                       org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCStatusHigh)
                                       },
                                       null);
                                }
                            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CStatusHigh parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CStatusHigh object =
            new CStatusHigh();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
               nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
               if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                     // Skip the element and report the null value.  It cannot have subelements.
                     while (!reader.isEndElement())
                         reader.next();
                     
                             return object;
                         

               }
            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","cStatusHigh").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setCStatusHigh(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class CellInfo_Array
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "CellInfo_Array",
            "");

        

                    /**
                    * field for CellInfo_Array
                    */

                    
                                protected ArrayOf_CellInfo localCellInfo_Array ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_CellInfo
                       */
                       public  ArrayOf_CellInfo getCellInfo_Array(){
                           return localCellInfo_Array;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param CellInfo_Array
                           */
                           public void setCellInfo_Array(ArrayOf_CellInfo param){
                        
                                        this.localCellInfo_Array=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localCellInfo_Array==null){
                               throw new org.apache.axis2.databinding.ADBException("CellInfo_Array cannot be null!");
                             }
                             localCellInfo_Array.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localCellInfo_Array.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static CellInfo_Array parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        CellInfo_Array object =
            new CellInfo_Array();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","CellInfo_Array").equals(reader.getName())){
                            
                                            object.setCellInfo_Array(ArrayOf_CellInfo.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class FloatArray
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/BasicTypes",
            "FloatArray",
            "");

        

                    /**
                    * field for FloatArray
                    */

                    
                                protected ArrayOf_Float localFloatArray ;
                            

                       /**
                       * Auto generated getter method
                       * @return ArrayOf_Float
                       */
                       public  ArrayOf_Float getFloatArray(){
                           return localFloatArray;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param FloatArray
                           */
                           public void setFloatArray(ArrayOf_Float param){
                        
                                        this.localFloatArray=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                             if (localFloatArray==null){
                               throw new org.apache.axis2.databinding.ADBException("FloatArray cannot be null!");
                             }
                             localFloatArray.serialize(MY_QNAME,xmlWriter);
                        

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/BasicTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                return localFloatArray.getPullParser(MY_QNAME);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static FloatArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        FloatArray object =
            new FloatArray();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/BasicTypes","FloatArray").equals(reader.getName())){
                            
                                            object.setFloatArray(ArrayOf_Float.Factory.parse(reader));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class UnregisterStateChange
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "UnregisterStateChange",
            "");

        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for RegistrationID
                    */

                    
                                protected java.lang.String localRegistrationID ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getRegistrationID(){
                           return localRegistrationID;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param RegistrationID
                           */
                           public void setRegistrationID(java.lang.String param){
                        
                                        this.localRegistrationID=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":UnregisterStateChange",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "UnregisterStateChange",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "registrationID", xmlWriter);
                         

                                      if (localRegistrationID==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localRegistrationID);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "registrationID"));
                                 
                                         elementList.add(localRegistrationID==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRegistrationID));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static UnregisterStateChange parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        UnregisterStateChange object =
            new UnregisterStateChange();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"UnregisterStateChange".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (UnregisterStateChange)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","registrationID").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setRegistrationID(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryEventsByDate
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryEventsByDate",
            "");

        

                    /**
                    * field for StartDate
                    */

                    
                                protected java.util.Calendar localStartDate ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.util.Calendar
                       */
                       public  java.util.Calendar getStartDate(){
                           return localStartDate;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param StartDate
                           */
                           public void setStartDate(java.util.Calendar param){
                        
                                        this.localStartDate=param;
                                

                           }
                        

                    /**
                    * field for EndDate
                    */

                    
                                protected java.util.Calendar localEndDate ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.util.Calendar
                       */
                       public  java.util.Calendar getEndDate(){
                           return localEndDate;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param EndDate
                           */
                           public void setEndDate(java.util.Calendar param){
                        
                                        this.localEndDate=param;
                                

                           }
                        

                    /**
                    * field for ClassNames
                    */

                    
                                protected java.lang.String localClassNames ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getClassNames(){
                           return localClassNames;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ClassNames
                           */
                           public void setClassNames(java.lang.String param){
                        
                                        this.localClassNames=param;
                                

                           }
                        

                    /**
                    * field for Imname
                    */

                    
                                protected java.lang.String localImname ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getImname(){
                           return localImname;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Imname
                           */
                           public void setImname(java.lang.String param){
                        
                                        this.localImname=param;
                                

                           }
                        

                    /**
                    * field for SlotsList
                    */

                    
                                protected java.lang.String localSlotsList ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getSlotsList(){
                           return localSlotsList;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param SlotsList
                           */
                           public void setSlotsList(java.lang.String param){
                        
                                        this.localSlotsList=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryEventsByDate",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryEventsByDate",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "startDate", xmlWriter);
                         

                                      if (localStartDate==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "endDate", xmlWriter);
                         

                                      if (localEndDate==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "classNames", xmlWriter);
                         

                                      if (localClassNames==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localClassNames);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "imname", xmlWriter);
                         

                                      if (localImname==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localImname);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "slotsList", xmlWriter);
                         

                                      if (localSlotsList==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localSlotsList);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "startDate"));
                             
                                     elementList.add(localStartDate==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartDate));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "endDate"));
                             
                                     elementList.add(localEndDate==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndDate));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "classNames"));
                             
                                     elementList.add(localClassNames==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClassNames));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "imname"));
                             
                                     elementList.add(localImname==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImname));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "slotsList"));
                                 
                                         elementList.add(localSlotsList==null?null:
                                         org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSlotsList));
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryEventsByDate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryEventsByDate object =
            new QueryEventsByDate();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryEventsByDate".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryEventsByDate)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","startDate").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setStartDate(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","endDate").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setEndDate(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","classNames").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setClassNames(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","imname").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setImname(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","slotsList").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setSlotsList(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class Num_of_results
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiTypes",
            "num_of_results",
            "");

        

                    /**
                    * field for Num_of_results
                    */

                    
                                protected int localNum_of_results ;
                            

                       /**
                       * Auto generated getter method
                       * @return int
                       */
                       public  int getNum_of_results(){
                           return localNum_of_results;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param Num_of_results
                           */
                           public void setNum_of_results(int param){
                        
                                        this.localNum_of_results=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            
            //We can safely assume an element has only one type associated with it
            
                        java.lang.String namespace = "http://blueprint.bmc.com/ImapiTypes";
                        java.lang.String _localName = "num_of_results";
                    
                        writeStartElement(null, namespace, _localName, xmlWriter);

                        // add the type details if this is used in a simple type
                           if (serializeType){
                               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiTypes");
                               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       namespacePrefix+":num_of_results",
                                       xmlWriter);
                               } else {
                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                       "num_of_results",
                                       xmlWriter);
                               }
                           }
                        
                                           if (localNum_of_results==java.lang.Integer.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_results));
                                           }
                        
                        xmlWriter.writeEndElement();
                

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiTypes")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
            
            //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNum_of_results)
                            },
                            null);

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static Num_of_results parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        Num_of_results object =
            new Num_of_results();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

               
            while(!reader.isEndElement()) {
                if (reader.isStartElement() ){
            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiTypes","num_of_results").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setNum_of_results(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                        
                          }  // End of if for expected property start element
                            
                         else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                         }
                      
                         } else {
                            reader.next();
                         }  
                       }  // end of while loop
                    



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

    public static class QueryResultHandle_output
    implements org.apache.axis2.databinding.ADBBean{
    
            public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://blueprint.bmc.com/ImapiElems",
            "QueryResultHandle_output",
            "");

        

                    /**
                    * field for ResultHandle
                    */

                    
                                protected java.lang.String localResultHandle ;
                            

                       /**
                       * Auto generated getter method
                       * @return java.lang.String
                       */
                       public  java.lang.String getResultHandle(){
                           return localResultHandle;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultHandle
                           */
                           public void setResultHandle(java.lang.String param){
                        
                                        this.localResultHandle=param;
                                

                           }
                        

                    /**
                    * field for ResultCount
                    */

                    
                                protected long localResultCount ;
                            

                       /**
                       * Auto generated getter method
                       * @return long
                       */
                       public  long getResultCount(){
                           return localResultCount;
                       }

                       
                    
                        /**
                           * Auto generated setter method
                           * @param param ResultCount
                           */
                           public void setResultCount(long param){
                        
                                        this.localResultCount=param;
                                

                           }
                        

 
 
    /**
    *
    * @param parentQName
    * @param factory
    * @return org.apache.axiom.om.OMElement
    */
   public org.apache.axiom.om.OMElement getOMElement (
           final javax.xml.namespace.QName parentQName,
           final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


    
           org.apache.axiom.om.OMDataSource dataSource =
                   new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
           return factory.createOMElement(dataSource,MY_QNAME);
        
    }

     public void serialize(final javax.xml.namespace.QName parentQName,
                                   javax.xml.stream.XMLStreamWriter xmlWriter)
                            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                       serialize(parentQName,xmlWriter,false);
     }

     public void serialize(final javax.xml.namespace.QName parentQName,
                           javax.xml.stream.XMLStreamWriter xmlWriter,
                           boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
        
            


            java.lang.String prefix = null;
            java.lang.String namespace = null;
            

                prefix = parentQName.getPrefix();
                namespace = parentQName.getNamespaceURI();
                writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
            
              if (serializeType){
           

               java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://blueprint.bmc.com/ImapiElems");
               if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       namespacePrefix+":QueryResultHandle_output",
                       xmlWriter);
               } else {
                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                       "QueryResultHandle_output",
                       xmlWriter);
               }

           
               }
           
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultHandle", xmlWriter);
                         

                                      if (localResultHandle==null){
                                          // write the nil attribute
                                          
                                                 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                              
                                      }else{

                                    
                                               xmlWriter.writeCharacters(localResultHandle);
                                        
                                      }
                                
                               xmlWriter.writeEndElement();
                         
                                namespace = "http://blueprint.bmc.com/ImapiElems";
                                writeStartElement(null, namespace, "resultCount", xmlWriter);
                         
                                           if (localResultCount==java.lang.Long.MIN_VALUE) {
                                       
                                                     throw new org.apache.axis2.databinding.ADBException("resultCount cannot be null!!");
                                                  
                                           } else {
                                                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCount));
                                           }
                                
                               xmlWriter.writeEndElement();
                         
                xmlWriter.writeEndElement();
           

    }

    private static java.lang.String generatePrefix(java.lang.String namespace) {
        if(namespace.equals("http://blueprint.bmc.com/ImapiElems")){
            return "";
        }
        return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                   javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
        if (writerPrefix != null) {
            xmlWriter.writeStartElement(namespace, localPart);
        } else {
            if (namespace.length() == 0) {
                prefix = "";
            } else if (prefix == null) {
                prefix = generatePrefix(namespace);
            }

            xmlWriter.writeStartElement(prefix, localPart, namespace);
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
    }
    
    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
        }
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName,attValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }
    }


       /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
    /**
     *  method to handle Qnames
     */

    private void writeQName(javax.xml.namespace.QName qname,
                            javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
        java.lang.String namespaceURI = qname.getNamespaceURI();
        if (namespaceURI != null) {
            java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
            if (prefix == null) {
                prefix = generatePrefix(namespaceURI);
                xmlWriter.writeNamespace(prefix, namespaceURI);
                xmlWriter.setPrefix(prefix,namespaceURI);
            }

            if (prefix.trim().length() > 0){
                xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            } else {
                // i.e this is the default namespace
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }

        } else {
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
    }

    private void writeQNames(javax.xml.namespace.QName[] qnames,
                             javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        if (qnames != null) {
            // we have to store this data until last moment since it is not possible to write any
            // namespace data after writing the charactor data
            java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
            java.lang.String namespaceURI = null;
            java.lang.String prefix = null;

            for (int i = 0; i < qnames.length; i++) {
                if (i > 0) {
                    stringToWrite.append(" ");
                }
                namespaceURI = qnames[i].getNamespaceURI();
                if (namespaceURI != null) {
                    prefix = xmlWriter.getPrefix(namespaceURI);
                    if ((prefix == null) || (prefix.length() == 0)) {
                        prefix = generatePrefix(namespaceURI);
                        xmlWriter.writeNamespace(prefix, namespaceURI);
                        xmlWriter.setPrefix(prefix,namespaceURI);
                    }

                    if (prefix.trim().length() > 0){
                        stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            }
            xmlWriter.writeCharacters(stringToWrite.toString());
        }

    }


    /**
     * Register a namespace prefix
     */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
    * databinding method to get an XML representation of this object
    *
    */
    public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                throws org.apache.axis2.databinding.ADBException{


    
             java.util.ArrayList elementList = new java.util.ArrayList();
             java.util.ArrayList attribList = new java.util.ArrayList();

            
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultHandle"));
                             
                                     elementList.add(localResultHandle==null?null:
                                     org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultHandle));
                                
                                  elementList.add(new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems",
                                                                  "resultCount"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResultCount));
                            

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
  *  Factory class that keeps the parse method
  */
public static class Factory{

    
    

    /**
    * static method to create the object
    * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
    *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
    * Postcondition: If this object is an element, the reader is positioned at its end element
    *                If this object is a complex type, the reader is positioned at the end element of its outer element
    */
    public static QueryResultHandle_output parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
        QueryResultHandle_output object =
            new QueryResultHandle_output();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix ="";
        java.lang.String namespaceuri ="";
        try {
            
            while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();

            
            if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
              java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                    "type");
              if (fullTypeName!=null){
                java.lang.String nsPrefix = null;
                if (fullTypeName.indexOf(":") > -1){
                    nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                }
                nsPrefix = nsPrefix==null?"":nsPrefix;

                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                
                        if (!"QueryResultHandle_output".equals(type)){
                            //find namespace for the prefix
                            java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                            return (QueryResultHandle_output)ExtensionMapper.getTypeObject(
                                 nsUri,type,reader);
                          }
                    

              }
            

            }

            

            
            // Note all attributes that were handled. Used to differ normal attributes
            // from anyAttributes.
            java.util.Vector handledAttributes = new java.util.Vector();
            

            
                
                reader.next();
            
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultHandle").equals(reader.getName())){
                            
                                   nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                   if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
                                
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultHandle(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                        
                                   } else {
                                       
                                       
                                       reader.getElementText(); // throw away text nodes if any.
                                   }
                                  
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                        
                                
                                while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                            
                                if (reader.isStartElement() && new javax.xml.namespace.QName("http://blueprint.bmc.com/ImapiElems","resultCount").equals(reader.getName())){
                            
                                java.lang.String content = reader.getElementText();
                                
                                          object.setResultCount(
                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                          
                                    reader.next();
                                
                          }  // End of if for expected property start element
                            
                            else{
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            }
                          
                        while (!reader.isStartElement() && !reader.isEndElement())
                            reader.next();
                        
                            if (reader.isStartElement())
                            // A start element we are not expecting indicates a trailing invalid property
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        



        } catch (javax.xml.stream.XMLStreamException e) {
            throw new java.lang.Exception(e);
        }

        return object;
    }

    }//end of factory class

    

    }
       

        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Subscribe param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Subscribe.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.NoValue_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.NoValue_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Execution_fault param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Execution_fault.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetEvents param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetEvents.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetEvents_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetEvents_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.AckEvents param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.AckEvents.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.RetrieveQueryResults param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.RetrieveQueryResults.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.RetrieveQueryResults_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.RetrieveQueryResults_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryComponentStatus param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryComponentStatus.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryResultHandle_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryResultHandle_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetFilterNames param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetFilterNames.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetFilterNames_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetFilterNames_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetQueryResultCount param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetQueryResultCount.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetQueryResultCount_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetQueryResultCount_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryComponentsByCondition param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryComponentsByCondition.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.EndQuery param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.EndQuery.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryEvents param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryEvents.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryComponentEvents param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryComponentEvents.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryModelImpact param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryModelImpact.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryComponentsByStatus param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryComponentsByStatus.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryComponent param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryComponent.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SetManualStatus param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SetManualStatus.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SetManualStatus_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SetManualStatus_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Connect param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Connect.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Connect_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Connect_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetCellInfo param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetCellInfo.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.GetCellInfo_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.GetCellInfo_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryModelPossibleRootCauses param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryModelPossibleRootCauses.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SendEvent param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SendEvent.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SendEvent_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SendEvent_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Disconnect param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Disconnect.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryEventsByDate param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryEventsByDate.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryClassDefinitions param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryClassDefinitions.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryClassDefinitions_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryClassDefinitions_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.Unsubscribe param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.Unsubscribe.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryEventByID param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryEventByID.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SetMaintenanceMode param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SetMaintenanceMode.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.SetMaintenanceMode_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.SetMaintenanceMode_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.QueryData param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.QueryData.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.UnregisterStateChange param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.UnregisterStateChange.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.UnregisterStateChange_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.UnregisterStateChange_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.RegisterStateChange param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.RegisterStateChange.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
        private  org.apache.axiom.om.OMElement  toOM(ImpactManagerStub.RegisterStateChange_output param, boolean optimizeContent)
        throws org.apache.axis2.AxisFault {

        
                    try{
                         return param.getOMElement(ImpactManagerStub.RegisterStateChange_output.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                    } catch(org.apache.axis2.databinding.ADBException e){
                        throw org.apache.axis2.AxisFault.makeFault(e);
                    }
                

        }
    
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.Subscribe param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.Subscribe.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.GetEvents param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.GetEvents.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.AckEvents param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.AckEvents.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.RetrieveQueryResults param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.RetrieveQueryResults.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryComponentStatus param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryComponentStatus.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.GetFilterNames param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.GetFilterNames.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.GetQueryResultCount param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.GetQueryResultCount.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryComponentsByCondition param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryComponentsByCondition.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.EndQuery param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.EndQuery.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryEvents param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryEvents.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryComponentEvents param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryComponentEvents.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryModelImpact param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryModelImpact.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryComponentsByStatus param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryComponentsByStatus.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryComponent param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryComponent.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.SetManualStatus param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.SetManualStatus.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.Connect param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.Connect.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.GetCellInfo param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.GetCellInfo.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryModelPossibleRootCauses param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryModelPossibleRootCauses.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.SendEvent param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.SendEvent.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.Disconnect param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.Disconnect.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryEventsByDate param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryEventsByDate.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryClassDefinitions param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryClassDefinitions.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.Unsubscribe param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.Unsubscribe.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryEventByID param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryEventByID.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.SetMaintenanceMode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.SetMaintenanceMode.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.QueryData param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.QueryData.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.UnregisterStateChange param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.UnregisterStateChange.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         
                                
                                    private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ImpactManagerStub.RegisterStateChange param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                    throws org.apache.axis2.AxisFault{

                                         
                                                try{

                                                        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                        emptyEnvelope.getBody().addChild(param.getOMElement(ImpactManagerStub.RegisterStateChange.MY_QNAME,factory));
                                                        return emptyEnvelope;
                                                    } catch(org.apache.axis2.databinding.ADBException e){
                                                        throw org.apache.axis2.AxisFault.makeFault(e);
                                                    }
                                            

                                    }
                            
                         
                         /* methods to provide back word compatibility */

                         


    /**
    *  get the default envelope
    */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (ImpactManagerStub.Subscribe.class.equals(type)){
                
                           return ImpactManagerStub.Subscribe.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.NoValue_output.class.equals(type)){
                
                           return ImpactManagerStub.NoValue_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetEvents.class.equals(type)){
                
                           return ImpactManagerStub.GetEvents.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetEvents_output.class.equals(type)){
                
                           return ImpactManagerStub.GetEvents_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.AckEvents.class.equals(type)){
                
                           return ImpactManagerStub.AckEvents.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.NoValue_output.class.equals(type)){
                
                           return ImpactManagerStub.NoValue_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.RetrieveQueryResults.class.equals(type)){
                
                           return ImpactManagerStub.RetrieveQueryResults.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.RetrieveQueryResults_output.class.equals(type)){
                
                           return ImpactManagerStub.RetrieveQueryResults_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryComponentStatus.class.equals(type)){
                
                           return ImpactManagerStub.QueryComponentStatus.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetFilterNames.class.equals(type)){
                
                           return ImpactManagerStub.GetFilterNames.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetFilterNames_output.class.equals(type)){
                
                           return ImpactManagerStub.GetFilterNames_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetQueryResultCount.class.equals(type)){
                
                           return ImpactManagerStub.GetQueryResultCount.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetQueryResultCount_output.class.equals(type)){
                
                           return ImpactManagerStub.GetQueryResultCount_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryComponentsByCondition.class.equals(type)){
                
                           return ImpactManagerStub.QueryComponentsByCondition.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.EndQuery.class.equals(type)){
                
                           return ImpactManagerStub.EndQuery.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.NoValue_output.class.equals(type)){
                
                           return ImpactManagerStub.NoValue_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryEvents.class.equals(type)){
                
                           return ImpactManagerStub.QueryEvents.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryComponentEvents.class.equals(type)){
                
                           return ImpactManagerStub.QueryComponentEvents.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryModelImpact.class.equals(type)){
                
                           return ImpactManagerStub.QueryModelImpact.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryComponentsByStatus.class.equals(type)){
                
                           return ImpactManagerStub.QueryComponentsByStatus.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryComponent.class.equals(type)){
                
                           return ImpactManagerStub.QueryComponent.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SetManualStatus.class.equals(type)){
                
                           return ImpactManagerStub.SetManualStatus.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SetManualStatus_output.class.equals(type)){
                
                           return ImpactManagerStub.SetManualStatus_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Connect.class.equals(type)){
                
                           return ImpactManagerStub.Connect.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Connect_output.class.equals(type)){
                
                           return ImpactManagerStub.Connect_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetCellInfo.class.equals(type)){
                
                           return ImpactManagerStub.GetCellInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.GetCellInfo_output.class.equals(type)){
                
                           return ImpactManagerStub.GetCellInfo_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryModelPossibleRootCauses.class.equals(type)){
                
                           return ImpactManagerStub.QueryModelPossibleRootCauses.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SendEvent.class.equals(type)){
                
                           return ImpactManagerStub.SendEvent.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SendEvent_output.class.equals(type)){
                
                           return ImpactManagerStub.SendEvent_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Disconnect.class.equals(type)){
                
                           return ImpactManagerStub.Disconnect.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.NoValue_output.class.equals(type)){
                
                           return ImpactManagerStub.NoValue_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryEventsByDate.class.equals(type)){
                
                           return ImpactManagerStub.QueryEventsByDate.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryClassDefinitions.class.equals(type)){
                
                           return ImpactManagerStub.QueryClassDefinitions.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryClassDefinitions_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryClassDefinitions_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Unsubscribe.class.equals(type)){
                
                           return ImpactManagerStub.Unsubscribe.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.NoValue_output.class.equals(type)){
                
                           return ImpactManagerStub.NoValue_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryEventByID.class.equals(type)){
                
                           return ImpactManagerStub.QueryEventByID.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SetMaintenanceMode.class.equals(type)){
                
                           return ImpactManagerStub.SetMaintenanceMode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.SetMaintenanceMode_output.class.equals(type)){
                
                           return ImpactManagerStub.SetMaintenanceMode_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryData.class.equals(type)){
                
                           return ImpactManagerStub.QueryData.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.QueryResultHandle_output.class.equals(type)){
                
                           return ImpactManagerStub.QueryResultHandle_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.UnregisterStateChange.class.equals(type)){
                
                           return ImpactManagerStub.UnregisterStateChange.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.UnregisterStateChange_output.class.equals(type)){
                
                           return ImpactManagerStub.UnregisterStateChange_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.RegisterStateChange.class.equals(type)){
                
                           return ImpactManagerStub.RegisterStateChange.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.RegisterStateChange_output.class.equals(type)){
                
                           return ImpactManagerStub.RegisterStateChange_output.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ImpactManagerStub.Execution_fault.class.equals(type)){
                
                           return ImpactManagerStub.Execution_fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }

 }
   
